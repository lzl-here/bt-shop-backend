// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package user

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *BaseUser) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseUser[number], err)
}

func (x *BaseUser) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseUser) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Username, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseUser) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.AvatarUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseUser) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.RegisterType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseUser) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.ShopId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseShop) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseShop[number], err)
}

func (x *BaseShop) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseShop) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ShopName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseShop) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ShopUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseShop) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ShopDescription, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseUser) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *BaseUser) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *BaseUser) fastWriteField2(buf []byte) (offset int) {
	if x.Username == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUsername())
	return offset
}

func (x *BaseUser) fastWriteField3(buf []byte) (offset int) {
	if x.AvatarUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetAvatarUrl())
	return offset
}

func (x *BaseUser) fastWriteField4(buf []byte) (offset int) {
	if x.RegisterType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetRegisterType())
	return offset
}

func (x *BaseUser) fastWriteField5(buf []byte) (offset int) {
	if x.ShopId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 5, x.GetShopId())
	return offset
}

func (x *BaseShop) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *BaseShop) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *BaseShop) fastWriteField2(buf []byte) (offset int) {
	if x.ShopName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetShopName())
	return offset
}

func (x *BaseShop) fastWriteField3(buf []byte) (offset int) {
	if x.ShopUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetShopUrl())
	return offset
}

func (x *BaseShop) fastWriteField4(buf []byte) (offset int) {
	if x.ShopDescription == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetShopDescription())
	return offset
}

func (x *BaseUser) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *BaseUser) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetId())
	return n
}

func (x *BaseUser) sizeField2() (n int) {
	if x.Username == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUsername())
	return n
}

func (x *BaseUser) sizeField3() (n int) {
	if x.AvatarUrl == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetAvatarUrl())
	return n
}

func (x *BaseUser) sizeField4() (n int) {
	if x.RegisterType == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetRegisterType())
	return n
}

func (x *BaseUser) sizeField5() (n int) {
	if x.ShopId == 0 {
		return n
	}
	n += fastpb.SizeUint64(5, x.GetShopId())
	return n
}

func (x *BaseShop) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *BaseShop) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetId())
	return n
}

func (x *BaseShop) sizeField2() (n int) {
	if x.ShopName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetShopName())
	return n
}

func (x *BaseShop) sizeField3() (n int) {
	if x.ShopUrl == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetShopUrl())
	return n
}

func (x *BaseShop) sizeField4() (n int) {
	if x.ShopDescription == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetShopDescription())
	return n
}

var fieldIDToName_BaseUser = map[int32]string{
	1: "Id",
	2: "Username",
	3: "AvatarUrl",
	4: "RegisterType",
	5: "ShopId",
}

var fieldIDToName_BaseShop = map[int32]string{
	1: "Id",
	2: "ShopName",
	3: "ShopUrl",
	4: "ShopDescription",
}
