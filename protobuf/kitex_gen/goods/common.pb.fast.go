// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package goods

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *BaseSpu) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseSpu[number], err)
}

func (x *BaseSpu) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseSpu) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.SpuName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseSpu) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.SpuDesc, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseSpu) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.CategoryId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseSpu) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CategoryName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseSpu) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.BrandId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseSpu) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.BrandName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseSpu) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.BrandIconUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseSpu) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.SpuPrice, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseSpu) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.Enabled, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *BaseSpu) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.SpuImgUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseSku) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseSku[number], err)
}

func (x *BaseSku) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseSku) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.SpuId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseSku) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.StockNum, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseSku) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.SkuPrice, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseSpec) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseSpec[number], err)
}

func (x *BaseSpec) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseSpec) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.SpecName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseSpec) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.SpuId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseSpecValue) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseSpecValue[number], err)
}

func (x *BaseSpecValue) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseSpecValue) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.SpecId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseSpecValue) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.SpecName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseSpecValue) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.SpecValue, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseAttribute) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseAttribute[number], err)
}

func (x *BaseAttribute) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseAttribute) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.SpuId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseAttribute) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.AttributeName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseAttribute) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.AttributeValue, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseKeyword) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseKeyword[number], err)
}

func (x *BaseKeyword) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseKeyword) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Value, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseCategory) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseCategory[number], err)
}

func (x *BaseCategory) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CategoryId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseCategory) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.CategoryName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseCategory) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ParentId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseCategory) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Level, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *BaseCategory) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v BaseCategory
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Children = append(x.Children, &v)
	return offset, nil
}

func (x *BaseBrand) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseBrand[number], err)
}

func (x *BaseBrand) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.BrandId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseBrand) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.BrandName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseBrand) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.IconUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseSpu) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	return offset
}

func (x *BaseSpu) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *BaseSpu) fastWriteField2(buf []byte) (offset int) {
	if x.SpuName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetSpuName())
	return offset
}

func (x *BaseSpu) fastWriteField3(buf []byte) (offset int) {
	if x.SpuDesc == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetSpuDesc())
	return offset
}

func (x *BaseSpu) fastWriteField4(buf []byte) (offset int) {
	if x.CategoryId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 4, x.GetCategoryId())
	return offset
}

func (x *BaseSpu) fastWriteField5(buf []byte) (offset int) {
	if x.CategoryName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetCategoryName())
	return offset
}

func (x *BaseSpu) fastWriteField6(buf []byte) (offset int) {
	if x.BrandId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 6, x.GetBrandId())
	return offset
}

func (x *BaseSpu) fastWriteField7(buf []byte) (offset int) {
	if x.BrandName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetBrandName())
	return offset
}

func (x *BaseSpu) fastWriteField8(buf []byte) (offset int) {
	if x.BrandIconUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetBrandIconUrl())
	return offset
}

func (x *BaseSpu) fastWriteField9(buf []byte) (offset int) {
	if x.SpuPrice == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetSpuPrice())
	return offset
}

func (x *BaseSpu) fastWriteField10(buf []byte) (offset int) {
	if !x.Enabled {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 10, x.GetEnabled())
	return offset
}

func (x *BaseSpu) fastWriteField11(buf []byte) (offset int) {
	if x.SpuImgUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 11, x.GetSpuImgUrl())
	return offset
}

func (x *BaseSku) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *BaseSku) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *BaseSku) fastWriteField2(buf []byte) (offset int) {
	if x.SpuId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 2, x.GetSpuId())
	return offset
}

func (x *BaseSku) fastWriteField3(buf []byte) (offset int) {
	if x.StockNum == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 3, x.GetStockNum())
	return offset
}

func (x *BaseSku) fastWriteField4(buf []byte) (offset int) {
	if x.SkuPrice == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetSkuPrice())
	return offset
}

func (x *BaseSpec) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *BaseSpec) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *BaseSpec) fastWriteField2(buf []byte) (offset int) {
	if x.SpecName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetSpecName())
	return offset
}

func (x *BaseSpec) fastWriteField3(buf []byte) (offset int) {
	if x.SpuId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 3, x.GetSpuId())
	return offset
}

func (x *BaseSpecValue) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *BaseSpecValue) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *BaseSpecValue) fastWriteField2(buf []byte) (offset int) {
	if x.SpecId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 2, x.GetSpecId())
	return offset
}

func (x *BaseSpecValue) fastWriteField3(buf []byte) (offset int) {
	if x.SpecName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetSpecName())
	return offset
}

func (x *BaseSpecValue) fastWriteField4(buf []byte) (offset int) {
	if x.SpecValue == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetSpecValue())
	return offset
}

func (x *BaseAttribute) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *BaseAttribute) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *BaseAttribute) fastWriteField2(buf []byte) (offset int) {
	if x.SpuId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 2, x.GetSpuId())
	return offset
}

func (x *BaseAttribute) fastWriteField3(buf []byte) (offset int) {
	if x.AttributeName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetAttributeName())
	return offset
}

func (x *BaseAttribute) fastWriteField4(buf []byte) (offset int) {
	if x.AttributeValue == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetAttributeValue())
	return offset
}

func (x *BaseKeyword) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *BaseKeyword) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *BaseKeyword) fastWriteField2(buf []byte) (offset int) {
	if x.Value == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetValue())
	return offset
}

func (x *BaseCategory) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *BaseCategory) fastWriteField1(buf []byte) (offset int) {
	if x.CategoryId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetCategoryId())
	return offset
}

func (x *BaseCategory) fastWriteField2(buf []byte) (offset int) {
	if x.CategoryName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetCategoryName())
	return offset
}

func (x *BaseCategory) fastWriteField3(buf []byte) (offset int) {
	if x.ParentId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 3, x.GetParentId())
	return offset
}

func (x *BaseCategory) fastWriteField4(buf []byte) (offset int) {
	if x.Level == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, x.GetLevel())
	return offset
}

func (x *BaseCategory) fastWriteField5(buf []byte) (offset int) {
	if x.Children == nil {
		return offset
	}
	for i := range x.GetChildren() {
		offset += fastpb.WriteMessage(buf[offset:], 5, x.GetChildren()[i])
	}
	return offset
}

func (x *BaseBrand) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *BaseBrand) fastWriteField1(buf []byte) (offset int) {
	if x.BrandId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetBrandId())
	return offset
}

func (x *BaseBrand) fastWriteField2(buf []byte) (offset int) {
	if x.BrandName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetBrandName())
	return offset
}

func (x *BaseBrand) fastWriteField3(buf []byte) (offset int) {
	if x.IconUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetIconUrl())
	return offset
}

func (x *BaseSpu) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	return n
}

func (x *BaseSpu) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetId())
	return n
}

func (x *BaseSpu) sizeField2() (n int) {
	if x.SpuName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetSpuName())
	return n
}

func (x *BaseSpu) sizeField3() (n int) {
	if x.SpuDesc == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetSpuDesc())
	return n
}

func (x *BaseSpu) sizeField4() (n int) {
	if x.CategoryId == 0 {
		return n
	}
	n += fastpb.SizeUint64(4, x.GetCategoryId())
	return n
}

func (x *BaseSpu) sizeField5() (n int) {
	if x.CategoryName == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetCategoryName())
	return n
}

func (x *BaseSpu) sizeField6() (n int) {
	if x.BrandId == 0 {
		return n
	}
	n += fastpb.SizeUint64(6, x.GetBrandId())
	return n
}

func (x *BaseSpu) sizeField7() (n int) {
	if x.BrandName == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetBrandName())
	return n
}

func (x *BaseSpu) sizeField8() (n int) {
	if x.BrandIconUrl == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetBrandIconUrl())
	return n
}

func (x *BaseSpu) sizeField9() (n int) {
	if x.SpuPrice == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetSpuPrice())
	return n
}

func (x *BaseSpu) sizeField10() (n int) {
	if !x.Enabled {
		return n
	}
	n += fastpb.SizeBool(10, x.GetEnabled())
	return n
}

func (x *BaseSpu) sizeField11() (n int) {
	if x.SpuImgUrl == "" {
		return n
	}
	n += fastpb.SizeString(11, x.GetSpuImgUrl())
	return n
}

func (x *BaseSku) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *BaseSku) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetId())
	return n
}

func (x *BaseSku) sizeField2() (n int) {
	if x.SpuId == 0 {
		return n
	}
	n += fastpb.SizeUint64(2, x.GetSpuId())
	return n
}

func (x *BaseSku) sizeField3() (n int) {
	if x.StockNum == 0 {
		return n
	}
	n += fastpb.SizeUint64(3, x.GetStockNum())
	return n
}

func (x *BaseSku) sizeField4() (n int) {
	if x.SkuPrice == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetSkuPrice())
	return n
}

func (x *BaseSpec) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *BaseSpec) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetId())
	return n
}

func (x *BaseSpec) sizeField2() (n int) {
	if x.SpecName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetSpecName())
	return n
}

func (x *BaseSpec) sizeField3() (n int) {
	if x.SpuId == 0 {
		return n
	}
	n += fastpb.SizeUint64(3, x.GetSpuId())
	return n
}

func (x *BaseSpecValue) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *BaseSpecValue) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetId())
	return n
}

func (x *BaseSpecValue) sizeField2() (n int) {
	if x.SpecId == 0 {
		return n
	}
	n += fastpb.SizeUint64(2, x.GetSpecId())
	return n
}

func (x *BaseSpecValue) sizeField3() (n int) {
	if x.SpecName == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetSpecName())
	return n
}

func (x *BaseSpecValue) sizeField4() (n int) {
	if x.SpecValue == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetSpecValue())
	return n
}

func (x *BaseAttribute) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *BaseAttribute) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetId())
	return n
}

func (x *BaseAttribute) sizeField2() (n int) {
	if x.SpuId == 0 {
		return n
	}
	n += fastpb.SizeUint64(2, x.GetSpuId())
	return n
}

func (x *BaseAttribute) sizeField3() (n int) {
	if x.AttributeName == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetAttributeName())
	return n
}

func (x *BaseAttribute) sizeField4() (n int) {
	if x.AttributeValue == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetAttributeValue())
	return n
}

func (x *BaseKeyword) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *BaseKeyword) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetId())
	return n
}

func (x *BaseKeyword) sizeField2() (n int) {
	if x.Value == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetValue())
	return n
}

func (x *BaseCategory) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *BaseCategory) sizeField1() (n int) {
	if x.CategoryId == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetCategoryId())
	return n
}

func (x *BaseCategory) sizeField2() (n int) {
	if x.CategoryName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetCategoryName())
	return n
}

func (x *BaseCategory) sizeField3() (n int) {
	if x.ParentId == 0 {
		return n
	}
	n += fastpb.SizeUint64(3, x.GetParentId())
	return n
}

func (x *BaseCategory) sizeField4() (n int) {
	if x.Level == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, x.GetLevel())
	return n
}

func (x *BaseCategory) sizeField5() (n int) {
	if x.Children == nil {
		return n
	}
	for i := range x.GetChildren() {
		n += fastpb.SizeMessage(5, x.GetChildren()[i])
	}
	return n
}

func (x *BaseBrand) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *BaseBrand) sizeField1() (n int) {
	if x.BrandId == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetBrandId())
	return n
}

func (x *BaseBrand) sizeField2() (n int) {
	if x.BrandName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetBrandName())
	return n
}

func (x *BaseBrand) sizeField3() (n int) {
	if x.IconUrl == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetIconUrl())
	return n
}

var fieldIDToName_BaseSpu = map[int32]string{
	1:  "Id",
	2:  "SpuName",
	3:  "SpuDesc",
	4:  "CategoryId",
	5:  "CategoryName",
	6:  "BrandId",
	7:  "BrandName",
	8:  "BrandIconUrl",
	9:  "SpuPrice",
	10: "Enabled",
	11: "SpuImgUrl",
}

var fieldIDToName_BaseSku = map[int32]string{
	1: "Id",
	2: "SpuId",
	3: "StockNum",
	4: "SkuPrice",
}

var fieldIDToName_BaseSpec = map[int32]string{
	1: "Id",
	2: "SpecName",
	3: "SpuId",
}

var fieldIDToName_BaseSpecValue = map[int32]string{
	1: "Id",
	2: "SpecId",
	3: "SpecName",
	4: "SpecValue",
}

var fieldIDToName_BaseAttribute = map[int32]string{
	1: "Id",
	2: "SpuId",
	3: "AttributeName",
	4: "AttributeValue",
}

var fieldIDToName_BaseKeyword = map[int32]string{
	1: "Id",
	2: "Value",
}

var fieldIDToName_BaseCategory = map[int32]string{
	1: "CategoryId",
	2: "CategoryName",
	3: "ParentId",
	4: "Level",
	5: "Children",
}

var fieldIDToName_BaseBrand = map[int32]string{
	1: "BrandId",
	2: "BrandName",
	3: "IconUrl",
}
