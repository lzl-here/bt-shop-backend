// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package goods

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *GetGoodsListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetGoodsListReq[number], err)
}

func (x *GetGoodsListReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v uint64
			v, offset, err = fastpb.ReadUint64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.SpuIds = append(x.SpuIds, v)
			return offset, err
		})
	return offset, err
}

func (x *GetGoodsListRsp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetGoodsListRsp[number], err)
}

func (x *GetGoodsListRsp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *GetGoodsListRsp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetGoodsListRsp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.LogId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetGoodsListRsp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v GetGoodsListRsp_GetGoodsListRspData
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Data = &v
	return offset, nil
}

func (x *GetGoodsDetailReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetGoodsDetailReq[number], err)
}

func (x *GetGoodsDetailReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.SpuId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *GetGoodsDetailRsp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetGoodsDetailRsp[number], err)
}

func (x *GetGoodsDetailRsp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *GetGoodsDetailRsp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetGoodsDetailRsp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.LogId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetGoodsDetailRsp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v GetGoodsDetailRsp_GetGoodsDetailRspData
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Data = &v
	return offset, nil
}

func (x *PublishGoodsReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PublishGoodsReq[number], err)
}

func (x *PublishGoodsReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CategoryId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *PublishGoodsReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.CategoryName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublishGoodsReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.BrandId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *PublishGoodsReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.BrandName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublishGoodsReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.SpuName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublishGoodsReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.SpuDesc, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublishGoodsReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.SpuPrice, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublishGoodsReq) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.SpuImgUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublishGoodsReq) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *PublishGoodsReq) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.ShopId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *PublishGoodsReq) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	var v PublishGoodsReq_PublishSku
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SkuList = append(x.SkuList, &v)
	return offset, nil
}

func (x *PublishGoodsReq) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	var v PublishGoodsReq_PublishAttribute
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.AttributeList = append(x.AttributeList, &v)
	return offset, nil
}

func (x *PublishGoodsRsp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PublishGoodsRsp[number], err)
}

func (x *PublishGoodsRsp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *PublishGoodsRsp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublishGoodsRsp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.LogId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublishGoodsRsp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v PublishGoodsRsp_PublishGoodsRspData
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Data = &v
	return offset, nil
}

func (x *GoodsSpu) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GoodsSpu[number], err)
}

func (x *GoodsSpu) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseSpu
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Spu = &v
	return offset, nil
}

func (x *GoodsSpu) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v GoodsSku
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SkuList = append(x.SkuList, &v)
	return offset, nil
}

func (x *GoodsSpu) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v BaseSpec
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SpecList = append(x.SpecList, &v)
	return offset, nil
}

func (x *GoodsSku) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GoodsSku[number], err)
}

func (x *GoodsSku) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseSku
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Sku = &v
	return offset, nil
}

func (x *GoodsSku) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v BaseSpecValue
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SpecValueList = append(x.SpecValueList, &v)
	return offset, nil
}

func (x *GetSellerGoodsListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetSellerGoodsListReq[number], err)
}

func (x *GetSellerGoodsListReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ShopId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *GetSellerGoodsListReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *GetSellerGoodsListReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.PageNo, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *GetSellerGoodsListRsp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetSellerGoodsListRsp[number], err)
}

func (x *GetSellerGoodsListRsp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *GetSellerGoodsListRsp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetSellerGoodsListRsp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.LogId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetSellerGoodsListRsp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v GetSellerGoodsListRsp_GetSellerGoodsListRspData
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Data = &v
	return offset, nil
}

func (x *GetGoodsListRsp_GetGoodsListRspData) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetGoodsListRsp_GetGoodsListRspData[number], err)
}

func (x *GetGoodsListRsp_GetGoodsListRspData) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v GoodsSpu
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SpuList = append(x.SpuList, &v)
	return offset, nil
}

func (x *GetGoodsDetailRsp_GetGoodsDetailRspData) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetGoodsDetailRsp_GetGoodsDetailRspData[number], err)
}

func (x *GetGoodsDetailRsp_GetGoodsDetailRspData) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v GoodsSpu
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Spu = &v
	return offset, nil
}

func (x *PublishGoodsReq_PublishSku) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PublishGoodsReq_PublishSku[number], err)
}

func (x *PublishGoodsReq_PublishSku) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StockNum, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *PublishGoodsReq_PublishSku) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.SkuPrice, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublishGoodsReq_PublishSku) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v PublishGoodsReq_PublishSpecValue
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SpecKeyValue = append(x.SpecKeyValue, &v)
	return offset, nil
}

func (x *PublishGoodsReq_PublishAttribute) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PublishGoodsReq_PublishAttribute[number], err)
}

func (x *PublishGoodsReq_PublishAttribute) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AttributeName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublishGoodsReq_PublishAttribute) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AttributeValue, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublishGoodsReq_PublishSpecValue) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PublishGoodsReq_PublishSpecValue[number], err)
}

func (x *PublishGoodsReq_PublishSpecValue) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.SpecName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublishGoodsReq_PublishSpecValue) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.SpecValue, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublishGoodsRsp_PublishGoodsRspData) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PublishGoodsRsp_PublishGoodsRspData[number], err)
}

func (x *PublishGoodsRsp_PublishGoodsRspData) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.SpuId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *GetSellerGoodsListRsp_GetSellerGoodsListRspData) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetSellerGoodsListRsp_GetSellerGoodsListRspData[number], err)
}

func (x *GetSellerGoodsListRsp_GetSellerGoodsListRspData) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseSpu
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SpuList = append(x.SpuList, &v)
	return offset, nil
}

func (x *GetSellerGoodsListRsp_GetSellerGoodsListRspData) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *GetSellerGoodsListRsp_GetSellerGoodsListRspData) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *GetSellerGoodsListRsp_GetSellerGoodsListRspData) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.PageNo, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *GetGoodsListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetGoodsListReq) fastWriteField1(buf []byte) (offset int) {
	if len(x.SpuIds) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetSpuIds()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteUint64(buf[offset:], numTagOrKey, x.GetSpuIds()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *GetGoodsListRsp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *GetGoodsListRsp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *GetGoodsListRsp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *GetGoodsListRsp) fastWriteField3(buf []byte) (offset int) {
	if x.LogId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetLogId())
	return offset
}

func (x *GetGoodsListRsp) fastWriteField4(buf []byte) (offset int) {
	if x.Data == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 4, x.GetData())
	return offset
}

func (x *GetGoodsDetailReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetGoodsDetailReq) fastWriteField1(buf []byte) (offset int) {
	if x.SpuId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetSpuId())
	return offset
}

func (x *GetGoodsDetailRsp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *GetGoodsDetailRsp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *GetGoodsDetailRsp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *GetGoodsDetailRsp) fastWriteField3(buf []byte) (offset int) {
	if x.LogId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetLogId())
	return offset
}

func (x *GetGoodsDetailRsp) fastWriteField4(buf []byte) (offset int) {
	if x.Data == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 4, x.GetData())
	return offset
}

func (x *PublishGoodsReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	return offset
}

func (x *PublishGoodsReq) fastWriteField1(buf []byte) (offset int) {
	if x.CategoryId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetCategoryId())
	return offset
}

func (x *PublishGoodsReq) fastWriteField2(buf []byte) (offset int) {
	if x.CategoryName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetCategoryName())
	return offset
}

func (x *PublishGoodsReq) fastWriteField3(buf []byte) (offset int) {
	if x.BrandId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 3, x.GetBrandId())
	return offset
}

func (x *PublishGoodsReq) fastWriteField4(buf []byte) (offset int) {
	if x.BrandName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetBrandName())
	return offset
}

func (x *PublishGoodsReq) fastWriteField5(buf []byte) (offset int) {
	if x.SpuName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetSpuName())
	return offset
}

func (x *PublishGoodsReq) fastWriteField6(buf []byte) (offset int) {
	if x.SpuDesc == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetSpuDesc())
	return offset
}

func (x *PublishGoodsReq) fastWriteField7(buf []byte) (offset int) {
	if x.SpuPrice == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetSpuPrice())
	return offset
}

func (x *PublishGoodsReq) fastWriteField8(buf []byte) (offset int) {
	if x.SpuImgUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetSpuImgUrl())
	return offset
}

func (x *PublishGoodsReq) fastWriteField9(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 9, x.GetUserId())
	return offset
}

func (x *PublishGoodsReq) fastWriteField10(buf []byte) (offset int) {
	if x.ShopId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 10, x.GetShopId())
	return offset
}

func (x *PublishGoodsReq) fastWriteField11(buf []byte) (offset int) {
	if x.SkuList == nil {
		return offset
	}
	for i := range x.GetSkuList() {
		offset += fastpb.WriteMessage(buf[offset:], 11, x.GetSkuList()[i])
	}
	return offset
}

func (x *PublishGoodsReq) fastWriteField12(buf []byte) (offset int) {
	if x.AttributeList == nil {
		return offset
	}
	for i := range x.GetAttributeList() {
		offset += fastpb.WriteMessage(buf[offset:], 12, x.GetAttributeList()[i])
	}
	return offset
}

func (x *PublishGoodsRsp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *PublishGoodsRsp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *PublishGoodsRsp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *PublishGoodsRsp) fastWriteField3(buf []byte) (offset int) {
	if x.LogId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetLogId())
	return offset
}

func (x *PublishGoodsRsp) fastWriteField4(buf []byte) (offset int) {
	if x.Data == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 4, x.GetData())
	return offset
}

func (x *GoodsSpu) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GoodsSpu) fastWriteField1(buf []byte) (offset int) {
	if x.Spu == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetSpu())
	return offset
}

func (x *GoodsSpu) fastWriteField2(buf []byte) (offset int) {
	if x.SkuList == nil {
		return offset
	}
	for i := range x.GetSkuList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetSkuList()[i])
	}
	return offset
}

func (x *GoodsSpu) fastWriteField3(buf []byte) (offset int) {
	if x.SpecList == nil {
		return offset
	}
	for i := range x.GetSpecList() {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.GetSpecList()[i])
	}
	return offset
}

func (x *GoodsSku) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *GoodsSku) fastWriteField1(buf []byte) (offset int) {
	if x.Sku == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetSku())
	return offset
}

func (x *GoodsSku) fastWriteField6(buf []byte) (offset int) {
	if x.SpecValueList == nil {
		return offset
	}
	for i := range x.GetSpecValueList() {
		offset += fastpb.WriteMessage(buf[offset:], 6, x.GetSpecValueList()[i])
	}
	return offset
}

func (x *GetSellerGoodsListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetSellerGoodsListReq) fastWriteField1(buf []byte) (offset int) {
	if x.ShopId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetShopId())
	return offset
}

func (x *GetSellerGoodsListReq) fastWriteField2(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetPageSize())
	return offset
}

func (x *GetSellerGoodsListReq) fastWriteField3(buf []byte) (offset int) {
	if x.PageNo == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetPageNo())
	return offset
}

func (x *GetSellerGoodsListRsp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *GetSellerGoodsListRsp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *GetSellerGoodsListRsp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *GetSellerGoodsListRsp) fastWriteField3(buf []byte) (offset int) {
	if x.LogId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetLogId())
	return offset
}

func (x *GetSellerGoodsListRsp) fastWriteField4(buf []byte) (offset int) {
	if x.Data == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 4, x.GetData())
	return offset
}

func (x *GetGoodsListRsp_GetGoodsListRspData) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetGoodsListRsp_GetGoodsListRspData) fastWriteField1(buf []byte) (offset int) {
	if x.SpuList == nil {
		return offset
	}
	for i := range x.GetSpuList() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetSpuList()[i])
	}
	return offset
}

func (x *GetGoodsDetailRsp_GetGoodsDetailRspData) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetGoodsDetailRsp_GetGoodsDetailRspData) fastWriteField1(buf []byte) (offset int) {
	if x.Spu == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetSpu())
	return offset
}

func (x *PublishGoodsReq_PublishSku) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *PublishGoodsReq_PublishSku) fastWriteField1(buf []byte) (offset int) {
	if x.StockNum == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetStockNum())
	return offset
}

func (x *PublishGoodsReq_PublishSku) fastWriteField2(buf []byte) (offset int) {
	if x.SkuPrice == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetSkuPrice())
	return offset
}

func (x *PublishGoodsReq_PublishSku) fastWriteField3(buf []byte) (offset int) {
	if x.SpecKeyValue == nil {
		return offset
	}
	for i := range x.GetSpecKeyValue() {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.GetSpecKeyValue()[i])
	}
	return offset
}

func (x *PublishGoodsReq_PublishAttribute) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *PublishGoodsReq_PublishAttribute) fastWriteField1(buf []byte) (offset int) {
	if x.AttributeName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAttributeName())
	return offset
}

func (x *PublishGoodsReq_PublishAttribute) fastWriteField2(buf []byte) (offset int) {
	if x.AttributeValue == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAttributeValue())
	return offset
}

func (x *PublishGoodsReq_PublishSpecValue) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *PublishGoodsReq_PublishSpecValue) fastWriteField1(buf []byte) (offset int) {
	if x.SpecName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetSpecName())
	return offset
}

func (x *PublishGoodsReq_PublishSpecValue) fastWriteField2(buf []byte) (offset int) {
	if x.SpecValue == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetSpecValue())
	return offset
}

func (x *PublishGoodsRsp_PublishGoodsRspData) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *PublishGoodsRsp_PublishGoodsRspData) fastWriteField1(buf []byte) (offset int) {
	if x.SpuId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetSpuId())
	return offset
}

func (x *GetSellerGoodsListRsp_GetSellerGoodsListRspData) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *GetSellerGoodsListRsp_GetSellerGoodsListRspData) fastWriteField1(buf []byte) (offset int) {
	if x.SpuList == nil {
		return offset
	}
	for i := range x.GetSpuList() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetSpuList()[i])
	}
	return offset
}

func (x *GetSellerGoodsListRsp_GetSellerGoodsListRspData) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *GetSellerGoodsListRsp_GetSellerGoodsListRspData) fastWriteField3(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetPageSize())
	return offset
}

func (x *GetSellerGoodsListRsp_GetSellerGoodsListRspData) fastWriteField4(buf []byte) (offset int) {
	if x.PageNo == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, x.GetPageNo())
	return offset
}

func (x *GetGoodsListReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetGoodsListReq) sizeField1() (n int) {
	if len(x.SpuIds) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetSpuIds()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeUint64(numTagOrKey, x.GetSpuIds()[numIdxOrVal])
			return n
		})
	return n
}

func (x *GetGoodsListRsp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *GetGoodsListRsp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetCode())
	return n
}

func (x *GetGoodsListRsp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *GetGoodsListRsp) sizeField3() (n int) {
	if x.LogId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetLogId())
	return n
}

func (x *GetGoodsListRsp) sizeField4() (n int) {
	if x.Data == nil {
		return n
	}
	n += fastpb.SizeMessage(4, x.GetData())
	return n
}

func (x *GetGoodsDetailReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetGoodsDetailReq) sizeField1() (n int) {
	if x.SpuId == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetSpuId())
	return n
}

func (x *GetGoodsDetailRsp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *GetGoodsDetailRsp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetCode())
	return n
}

func (x *GetGoodsDetailRsp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *GetGoodsDetailRsp) sizeField3() (n int) {
	if x.LogId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetLogId())
	return n
}

func (x *GetGoodsDetailRsp) sizeField4() (n int) {
	if x.Data == nil {
		return n
	}
	n += fastpb.SizeMessage(4, x.GetData())
	return n
}

func (x *PublishGoodsReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	return n
}

func (x *PublishGoodsReq) sizeField1() (n int) {
	if x.CategoryId == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetCategoryId())
	return n
}

func (x *PublishGoodsReq) sizeField2() (n int) {
	if x.CategoryName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetCategoryName())
	return n
}

func (x *PublishGoodsReq) sizeField3() (n int) {
	if x.BrandId == 0 {
		return n
	}
	n += fastpb.SizeUint64(3, x.GetBrandId())
	return n
}

func (x *PublishGoodsReq) sizeField4() (n int) {
	if x.BrandName == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetBrandName())
	return n
}

func (x *PublishGoodsReq) sizeField5() (n int) {
	if x.SpuName == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetSpuName())
	return n
}

func (x *PublishGoodsReq) sizeField6() (n int) {
	if x.SpuDesc == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetSpuDesc())
	return n
}

func (x *PublishGoodsReq) sizeField7() (n int) {
	if x.SpuPrice == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetSpuPrice())
	return n
}

func (x *PublishGoodsReq) sizeField8() (n int) {
	if x.SpuImgUrl == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetSpuImgUrl())
	return n
}

func (x *PublishGoodsReq) sizeField9() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeUint64(9, x.GetUserId())
	return n
}

func (x *PublishGoodsReq) sizeField10() (n int) {
	if x.ShopId == 0 {
		return n
	}
	n += fastpb.SizeUint64(10, x.GetShopId())
	return n
}

func (x *PublishGoodsReq) sizeField11() (n int) {
	if x.SkuList == nil {
		return n
	}
	for i := range x.GetSkuList() {
		n += fastpb.SizeMessage(11, x.GetSkuList()[i])
	}
	return n
}

func (x *PublishGoodsReq) sizeField12() (n int) {
	if x.AttributeList == nil {
		return n
	}
	for i := range x.GetAttributeList() {
		n += fastpb.SizeMessage(12, x.GetAttributeList()[i])
	}
	return n
}

func (x *PublishGoodsRsp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *PublishGoodsRsp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetCode())
	return n
}

func (x *PublishGoodsRsp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *PublishGoodsRsp) sizeField3() (n int) {
	if x.LogId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetLogId())
	return n
}

func (x *PublishGoodsRsp) sizeField4() (n int) {
	if x.Data == nil {
		return n
	}
	n += fastpb.SizeMessage(4, x.GetData())
	return n
}

func (x *GoodsSpu) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GoodsSpu) sizeField1() (n int) {
	if x.Spu == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetSpu())
	return n
}

func (x *GoodsSpu) sizeField2() (n int) {
	if x.SkuList == nil {
		return n
	}
	for i := range x.GetSkuList() {
		n += fastpb.SizeMessage(2, x.GetSkuList()[i])
	}
	return n
}

func (x *GoodsSpu) sizeField3() (n int) {
	if x.SpecList == nil {
		return n
	}
	for i := range x.GetSpecList() {
		n += fastpb.SizeMessage(3, x.GetSpecList()[i])
	}
	return n
}

func (x *GoodsSku) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField6()
	return n
}

func (x *GoodsSku) sizeField1() (n int) {
	if x.Sku == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetSku())
	return n
}

func (x *GoodsSku) sizeField6() (n int) {
	if x.SpecValueList == nil {
		return n
	}
	for i := range x.GetSpecValueList() {
		n += fastpb.SizeMessage(6, x.GetSpecValueList()[i])
	}
	return n
}

func (x *GetSellerGoodsListReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetSellerGoodsListReq) sizeField1() (n int) {
	if x.ShopId == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetShopId())
	return n
}

func (x *GetSellerGoodsListReq) sizeField2() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetPageSize())
	return n
}

func (x *GetSellerGoodsListReq) sizeField3() (n int) {
	if x.PageNo == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetPageNo())
	return n
}

func (x *GetSellerGoodsListRsp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *GetSellerGoodsListRsp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetCode())
	return n
}

func (x *GetSellerGoodsListRsp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *GetSellerGoodsListRsp) sizeField3() (n int) {
	if x.LogId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetLogId())
	return n
}

func (x *GetSellerGoodsListRsp) sizeField4() (n int) {
	if x.Data == nil {
		return n
	}
	n += fastpb.SizeMessage(4, x.GetData())
	return n
}

func (x *GetGoodsListRsp_GetGoodsListRspData) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetGoodsListRsp_GetGoodsListRspData) sizeField1() (n int) {
	if x.SpuList == nil {
		return n
	}
	for i := range x.GetSpuList() {
		n += fastpb.SizeMessage(1, x.GetSpuList()[i])
	}
	return n
}

func (x *GetGoodsDetailRsp_GetGoodsDetailRspData) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetGoodsDetailRsp_GetGoodsDetailRspData) sizeField1() (n int) {
	if x.Spu == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetSpu())
	return n
}

func (x *PublishGoodsReq_PublishSku) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *PublishGoodsReq_PublishSku) sizeField1() (n int) {
	if x.StockNum == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetStockNum())
	return n
}

func (x *PublishGoodsReq_PublishSku) sizeField2() (n int) {
	if x.SkuPrice == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetSkuPrice())
	return n
}

func (x *PublishGoodsReq_PublishSku) sizeField3() (n int) {
	if x.SpecKeyValue == nil {
		return n
	}
	for i := range x.GetSpecKeyValue() {
		n += fastpb.SizeMessage(3, x.GetSpecKeyValue()[i])
	}
	return n
}

func (x *PublishGoodsReq_PublishAttribute) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *PublishGoodsReq_PublishAttribute) sizeField1() (n int) {
	if x.AttributeName == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAttributeName())
	return n
}

func (x *PublishGoodsReq_PublishAttribute) sizeField2() (n int) {
	if x.AttributeValue == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAttributeValue())
	return n
}

func (x *PublishGoodsReq_PublishSpecValue) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *PublishGoodsReq_PublishSpecValue) sizeField1() (n int) {
	if x.SpecName == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetSpecName())
	return n
}

func (x *PublishGoodsReq_PublishSpecValue) sizeField2() (n int) {
	if x.SpecValue == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetSpecValue())
	return n
}

func (x *PublishGoodsRsp_PublishGoodsRspData) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *PublishGoodsRsp_PublishGoodsRspData) sizeField1() (n int) {
	if x.SpuId == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetSpuId())
	return n
}

func (x *GetSellerGoodsListRsp_GetSellerGoodsListRspData) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *GetSellerGoodsListRsp_GetSellerGoodsListRspData) sizeField1() (n int) {
	if x.SpuList == nil {
		return n
	}
	for i := range x.GetSpuList() {
		n += fastpb.SizeMessage(1, x.GetSpuList()[i])
	}
	return n
}

func (x *GetSellerGoodsListRsp_GetSellerGoodsListRspData) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetTotal())
	return n
}

func (x *GetSellerGoodsListRsp_GetSellerGoodsListRspData) sizeField3() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetPageSize())
	return n
}

func (x *GetSellerGoodsListRsp_GetSellerGoodsListRspData) sizeField4() (n int) {
	if x.PageNo == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, x.GetPageNo())
	return n
}

var fieldIDToName_GetGoodsListReq = map[int32]string{
	1: "SpuIds",
}

var fieldIDToName_GetGoodsListRsp = map[int32]string{
	1: "Code",
	2: "Msg",
	3: "LogId",
	4: "Data",
}

var fieldIDToName_GetGoodsDetailReq = map[int32]string{
	1: "SpuId",
}

var fieldIDToName_GetGoodsDetailRsp = map[int32]string{
	1: "Code",
	2: "Msg",
	3: "LogId",
	4: "Data",
}

var fieldIDToName_PublishGoodsReq = map[int32]string{
	1:  "CategoryId",
	2:  "CategoryName",
	3:  "BrandId",
	4:  "BrandName",
	5:  "SpuName",
	6:  "SpuDesc",
	7:  "SpuPrice",
	8:  "SpuImgUrl",
	9:  "UserId",
	10: "ShopId",
	11: "SkuList",
	12: "AttributeList",
}

var fieldIDToName_PublishGoodsRsp = map[int32]string{
	1: "Code",
	2: "Msg",
	3: "LogId",
	4: "Data",
}

var fieldIDToName_GoodsSpu = map[int32]string{
	1: "Spu",
	2: "SkuList",
	3: "SpecList",
}

var fieldIDToName_GoodsSku = map[int32]string{
	1: "Sku",
	6: "SpecValueList",
}

var fieldIDToName_GetSellerGoodsListReq = map[int32]string{
	1: "ShopId",
	2: "PageSize",
	3: "PageNo",
}

var fieldIDToName_GetSellerGoodsListRsp = map[int32]string{
	1: "Code",
	2: "Msg",
	3: "LogId",
	4: "Data",
}

var fieldIDToName_GetGoodsListRsp_GetGoodsListRspData = map[int32]string{
	1: "SpuList",
}

var fieldIDToName_GetGoodsDetailRsp_GetGoodsDetailRspData = map[int32]string{
	1: "Spu",
}

var fieldIDToName_PublishGoodsReq_PublishSku = map[int32]string{
	1: "StockNum",
	2: "SkuPrice",
	3: "SpecKeyValue",
}

var fieldIDToName_PublishGoodsReq_PublishAttribute = map[int32]string{
	1: "AttributeName",
	2: "AttributeValue",
}

var fieldIDToName_PublishGoodsReq_PublishSpecValue = map[int32]string{
	1: "SpecName",
	2: "SpecValue",
}

var fieldIDToName_PublishGoodsRsp_PublishGoodsRspData = map[int32]string{
	1: "SpuId",
}

var fieldIDToName_GetSellerGoodsListRsp_GetSellerGoodsListRspData = map[int32]string{
	1: "SpuList",
	2: "Total",
	3: "PageSize",
	4: "PageNo",
}
