// Code generated by Kitex v0.12.1. DO NOT EDIT.

package orderservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	order "github.com/lzl-here/bt-shop-backend/protobuf/kitex_gen/order"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateTrade(ctx context.Context, Req *order.CreateTradeReq, callOptions ...callopt.Option) (r *order.CreateTradeRsp, err error)
	GetTradeList(ctx context.Context, Req *order.GetTradeListReq, callOptions ...callopt.Option) (r *order.GetTradeListRsp, err error)
	GetTradeDetail(ctx context.Context, Req *order.GetTradeDetailReq, callOptions ...callopt.Option) (r *order.GetTradeDetailRsp, err error)
	GetOrderDetail(ctx context.Context, Req *order.GetOrderDetailReq, callOptions ...callopt.Option) (r *order.GetOrderDetailRsp, err error)
	CancelTrade(ctx context.Context, Req *order.CancelTradeReq, callOptions ...callopt.Option) (r *order.CancelTradeRsp, err error)
	GetOrderItems(ctx context.Context, Req *order.GetOrderItemsReq, callOptions ...callopt.Option) (r *order.GetOrderItemsRsp, err error)
	PaySuccessToOrder(ctx context.Context, Req *order.PaySuccessToOrderReq, callOptions ...callopt.Option) (r *order.PaySuccessToOrderRsp, err error)
	PayCancelToOrder(ctx context.Context, Req *order.PayCancelToOrderReq, callOptions ...callopt.Option) (r *order.PayCancelToOrderRsp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kOrderServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kOrderServiceClient struct {
	*kClient
}

func (p *kOrderServiceClient) CreateTrade(ctx context.Context, Req *order.CreateTradeReq, callOptions ...callopt.Option) (r *order.CreateTradeRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateTrade(ctx, Req)
}

func (p *kOrderServiceClient) GetTradeList(ctx context.Context, Req *order.GetTradeListReq, callOptions ...callopt.Option) (r *order.GetTradeListRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetTradeList(ctx, Req)
}

func (p *kOrderServiceClient) GetTradeDetail(ctx context.Context, Req *order.GetTradeDetailReq, callOptions ...callopt.Option) (r *order.GetTradeDetailRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetTradeDetail(ctx, Req)
}

func (p *kOrderServiceClient) GetOrderDetail(ctx context.Context, Req *order.GetOrderDetailReq, callOptions ...callopt.Option) (r *order.GetOrderDetailRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetOrderDetail(ctx, Req)
}

func (p *kOrderServiceClient) CancelTrade(ctx context.Context, Req *order.CancelTradeReq, callOptions ...callopt.Option) (r *order.CancelTradeRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CancelTrade(ctx, Req)
}

func (p *kOrderServiceClient) GetOrderItems(ctx context.Context, Req *order.GetOrderItemsReq, callOptions ...callopt.Option) (r *order.GetOrderItemsRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetOrderItems(ctx, Req)
}

func (p *kOrderServiceClient) PaySuccessToOrder(ctx context.Context, Req *order.PaySuccessToOrderReq, callOptions ...callopt.Option) (r *order.PaySuccessToOrderRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PaySuccessToOrder(ctx, Req)
}

func (p *kOrderServiceClient) PayCancelToOrder(ctx context.Context, Req *order.PayCancelToOrderReq, callOptions ...callopt.Option) (r *order.PayCancelToOrderRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PayCancelToOrder(ctx, Req)
}
