// Code generated by hertz generator.

package api_goods

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	api_goods "github.com/lzl-here/bt-shop-backend/apps/gateway/biz/model/api_goods"
	"github.com/lzl-here/bt-shop-backend/apps/gateway/global"
	"github.com/lzl-here/bt-shop-backend/apps/gateway/utils"
	ggen "github.com/lzl-here/bt-shop-backend/kitex_gen/goods"
)

// GetKeywordDownList .
// @router /goods/get_keyword_down_list [POST]
func GetKeywordDownList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_goods.GetKeywordDownListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ggen.GetKeywordDownListReq{}
	if err := utils.CopyFields(&req, rpcReq); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	rpcResp, err := global.GoodsClient.GetKeywordDownList(ctx, rpcReq)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(api_goods.GetKeywordDownListRsp)
	if err := utils.CopyFields(rpcResp, resp); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// SearchSpuList .
// @router /goods/search_spu_list [POST]
func SearchSpuList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_goods.SearchSpuListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ggen.SearchSpuListReq{}
	if err := utils.CopyFields(&req, rpcReq); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	rpcResp, err := global.GoodsClient.SearchSpuList(ctx, rpcReq)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(api_goods.SearchSpuListRsp)
	if err := utils.CopyFields(rpcResp, resp); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetGoodsDetail .
// @router /goods/get_goods_detail [POST]
func GetGoodsDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_goods.GetGoodsDetailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ggen.GetGoodsDetailReq{}
	if err := utils.CopyFields(&req, rpcReq); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	rpcResp, err := global.GoodsClient.GetGoodsDetail(ctx, rpcReq)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(api_goods.GetGoodsDetailRsp)
	if err := utils.CopyFields(rpcResp, resp); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetGoodsList .
// @router /goods/get_goods_list [POST]
func GetGoodsList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_goods.GetGoodsListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ggen.GetGoodsListReq{}
	if err := utils.CopyFields(&req, rpcReq); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	rpcResp, err := global.GoodsClient.GetGoodsList(ctx, rpcReq)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(api_goods.GetGoodsListRsp)
	if err := utils.CopyFields(rpcResp, resp); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetCategoryList .
// @router /goods/get_category_list [POST]
func GetCategoryList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_goods.GetCategoryListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ggen.GetCategoryListReq{}
	if err := utils.CopyFields(&req, rpcReq); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}
	rpcResp, err := global.GoodsClient.GetCategoryList(ctx, rpcReq)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(api_goods.GetCategoryListRsp)
	if err := utils.CopyFields(rpcResp, resp); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetBrandList .
// @router /goods/get_brand_list [POST]
func GetBrandList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_goods.GetBrandListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ggen.GetBrandListReq{}
	if err := utils.CopyFields(&req, rpcReq); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	rpcResp, err := global.GoodsClient.GetBrandList(ctx, rpcReq)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(api_goods.GetBrandListRsp)
	if err := utils.CopyFields(rpcResp, resp); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// AddToCart .
// @router /goods/add_to_cart [POST]
func AddToCart(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_goods.AddToCartReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ggen.AddToCartReq{}
	if err := utils.CopyFields(&req, rpcReq); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	rpcResp, err := global.GoodsClient.AddToCart(ctx, rpcReq)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(api_goods.AddToCartRsp)
	if err := utils.CopyFields(rpcResp, resp); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// PublishGoods .
// @router /goods/publish_goods [POST]
func PublishGoods(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_goods.PublishGoodsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ggen.PublishGoodsReq{}
	if err := utils.CopyFields(&req, rpcReq); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	rpcResp, err := global.GoodsClient.PublishGoods(ctx, rpcReq)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(api_goods.PublishGoodsRsp)
	if err := utils.CopyFields(rpcResp, resp); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// StockReduce .
// @router /goods/stock_reduce [POST]
func StockReduce(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_goods.StockReduceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ggen.StockReduceReq{}
	if err := utils.CopyFields(&req, rpcReq); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	rpcResp, err := global.GoodsClient.StockReduce(ctx, rpcReq)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(api_goods.StockReduceRsp)
	if err := utils.CopyFields(rpcResp, resp); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// StockIncrease .
// @router /goods/stock_increase [POST]
func StockIncrease(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_goods.StockIncreaseReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ggen.StockIncreaseReq{}
	if err := utils.CopyFields(&req, rpcReq); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	rpcResp, err := global.GoodsClient.StockIncrease(ctx, rpcReq)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(api_goods.StockIncreaseRsp)
	if err := utils.CopyFields(rpcResp, resp); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}
