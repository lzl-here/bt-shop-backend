// Code generated by hertz generator.

package api_order

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	api_order "github.com/lzl-here/bt-shop-backend/apps/gateway/biz/model/api_order"
	"github.com/lzl-here/bt-shop-backend/apps/gateway/global"
	"github.com/lzl-here/bt-shop-backend/apps/gateway/utils"
	ogen "github.com/lzl-here/bt-shop-backend/kitex_gen/order"
)

// CreateTrade .
// @router /order/create_trade [POST]
func CreateTrade(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_order.CreateTradeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ogen.CreateTradeReq{}
	if err := utils.CopyFields(&req, rpcReq); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	rpcResp, err := global.OrderClient.CreateTrade(ctx, rpcReq)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(api_order.CreateTradeRsp)
	if err := utils.CopyFields(rpcResp, resp); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

func CancelTrade(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_order.CancelTradeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ogen.CancelTradeReq{}
	if err := utils.CopyFields(&req, rpcReq); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	rpcResp, err := global.OrderClient.CancelTrade(ctx, rpcReq)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(api_order.CancelTradeRsp)
	if err := utils.CopyFields(rpcResp, resp); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetOrderItems .
// @router /order/get_order_items [GET]
func GetOrderItems(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_order.GetOrderItemsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ogen.GetOrderItemsReq{}
	if err := utils.CopyFields(&req, rpcReq); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	rpcResp, err := global.OrderClient.GetOrderItems(ctx, rpcReq)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(api_order.GetOrderItemsRsp)
	if err := utils.CopyFields(rpcResp, resp); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// PaySuccessToOrder .
// @router /order/pay_success_to_order [POST]
func PaySuccessToOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_order.PaySuccessToOrderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ogen.PaySuccessToOrderReq{}
	if err := utils.CopyFields(&req, rpcReq); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	rpcResp, err := global.OrderClient.PaySuccessToOrder(ctx, rpcReq)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(api_order.PaySuccessToOrderRsp)
	if err := utils.CopyFields(rpcResp, resp); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// PayCancelToOrder .
// @router /order/pay_cancel_to_order [POST]
func PayCancelToOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_order.PayCancelToOrderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ogen.PayCancelToOrderReq{}
	if err := utils.CopyFields(&req, rpcReq); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	rpcResp, err := global.OrderClient.PayCancelToOrder(ctx, rpcReq)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(api_order.PayCancelToOrderRsp)
	if err := utils.CopyFields(rpcResp, resp); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}
