// Code generated by hertz generator.

package api_pay

import (
	"context"
	"fmt"
	"net/url"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	_ "github.com/hertz-contrib/swagger"
	api_pay "github.com/lzl-here/bt-shop-backend/apps/gateway/biz/model/api_pay"
	"github.com/lzl-here/bt-shop-backend/apps/gateway/global"
	pgen "github.com/lzl-here/bt-shop-backend/kitex_gen/pay"
	_ "github.com/swaggo/files"
)

// Pay .
// @router /pay/pay [POST]
func Pay(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_pay.ApiPayReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	srvResp, err := global.PayClient.Pay(ctx, &pgen.PayReq{
		Subject:     req.Subject,
		TotalAmount: req.Subject,
		TradeNo:     req.TradeNo,
	})

	if err != nil {
		c.JSON(consts.StatusInternalServerError, &pgen.PayRsp{Code: 500, Msg: err.Error()})
		return
	}
	resp := &pgen.PayRsp{
		Code:  int32(srvResp.Code),
		Msg:   srvResp.Msg,
		LogId: "",
		Data: &pgen.PayRsp_PayRspData{
			PayUrl:  srvResp.Data.PayUrl,
			TradeNo: srvResp.Data.TradeNo,
		},
	}
	c.JSON(consts.StatusOK, resp)
}

// AlipayWebhook .
// @router /pay/webhook/alipay [POST]
func AlipayWebhook(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_pay.ApiAlipayWebhookReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	values := url.Values{}
	// 校验签名
	for _, p := range c.Params {
		values.Add(p.Key, p.Value)
	}
	_, err = global.AlipayClient.DecodeNotification(values)
	if err != nil {
		fmt.Println(err)
		return
	}
	// TODO 通知支付宝已完成，不然支付宝会执行重试
	// alipay.ACKNotification(nil)
	resp := new(api_pay.ApiAlipayWebhookRsp)

	c.JSON(consts.StatusOK, resp)
}
