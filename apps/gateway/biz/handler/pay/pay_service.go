// Code generated by hertz generator.

package pay

import (
	"context"
	"fmt"
	"net/url"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	pay "github.com/lzl-here/bt-shop-backend/apps/gateway/biz/model/pay"
	"github.com/lzl-here/bt-shop-backend/apps/gateway/global"
	"github.com/smartwalle/alipay/v3"
)

// Pay .
// @router /pay/pay [POST]
func Pay(ctx context.Context, c *app.RequestContext) {
	var err error
	var req pay.PrepayReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	values := url.Values{}
	// 校验签名
	for _, p := range c.Params {
		values.Add(p.Key, p.Value)
	}
	_, err = global.AlipayClient.DecodeNotification(values)
	if err != nil {
		fmt.Println(err)
		return
	}
	//  TODO 业务处理
	// TODO 通知支付宝已完成，不然支付宝会执行重试
	alipay.ACKNotification(nil)

	resp := new(pay.PrepayRsp)

	c.JSON(consts.StatusOK, resp)
}

// AlipayWebhook .
// @router /pay/webhook/alipay [POST]
func AlipayWebhook(ctx context.Context, c *app.RequestContext) {
	var err error
	var req pay.AlipayWebhookReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(pay.AlipayWebhookRsp)

	c.JSON(consts.StatusOK, resp)
}
