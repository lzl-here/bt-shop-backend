// Code generated by hertz generator.

package pay

import (
	"context"
	"fmt"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/lzl-here/bt-shop-backend/apps/gateway/global"
	pay "github.com/lzl-here/bt-shop-backend/protobuf/kitex_gen/pay"
)

// Pay .
// @router /pay/pay [POST]
func Pay(ctx context.Context, c *app.RequestContext) {
	var err error
	var req pay.PayReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.PayClient.Pay(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &pay.PayRsp{
			Code: 500,
			Msg:  err.Error(),
		})
		return
	}

	if resp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &pay.PayRsp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		fmt.Printf("code: %s - code: %d", resp.Msg, resp.Code)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// ReTrade .
// @router /pay/re_trade [POST]
func ReTrade(ctx context.Context, c *app.RequestContext) {
	var err error
	var req pay.ReTradeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.PayClient.ReTrade(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &pay.ReTradeRsp{
			Code: 500,
			Msg:  err.Error(),
		})
		return
	}

	if resp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &pay.ReTradeRsp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		fmt.Printf("code: %s - code: %d", resp.Msg, resp.Code)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// AlipayWebhook .
// @router /pay/alipay_webhook [POST]
func AlipayWebhook(ctx context.Context, c *app.RequestContext) {
	var err error
	var req pay.AlipayWebhookReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.PayClient.AlipayWebhook(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &pay.AlipayWebhookRsp{
			Code: 500,
			Msg:  err.Error(),
		})
		return
	}

	if resp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &pay.AlipayWebhookRsp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		fmt.Printf("code: %s - code: %d", resp.Msg, resp.Code)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// ClosePay .
// @router /pay/close_pay [POST]
func ClosePay(ctx context.Context, c *app.RequestContext) {
	var err error
	var req pay.ClosePayReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.PayClient.ClosePay(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &pay.ClosePayRsp{
			Code: 500,
			Msg:  err.Error(),
		})
		return
	}

	if resp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &pay.ClosePayRsp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		fmt.Printf("code: %s - code: %d", resp.Msg, resp.Code)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// RefundPay .
// @router /pay/refund_pay [POST]
func RefundPay(ctx context.Context, c *app.RequestContext) {
	var err error
	var req pay.RefundPayReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.PayClient.RefundPay(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &pay.RefundPayRsp{
			Code: 500,
			Msg:  err.Error(),
		})
		return
	}

	if resp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &pay.RefundPayRsp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		fmt.Printf("code: %s - code: %d", resp.Msg, resp.Code)
		return
	}

	c.JSON(consts.StatusOK, resp)
}
