// Code generated by hertz generator.

package order

import (
	"context"
	"fmt"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	order "github.com/lzl-here/bt-shop-backend/apps/gateway/biz/model/order"
	"github.com/lzl-here/bt-shop-backend/apps/gateway/global"
	"github.com/lzl-here/bt-shop-backend/apps/gateway/utils"
	ogen "github.com/lzl-here/bt-shop-backend/kitex_gen/order"
)

// CreateTrade .
// @router /order/create_trade [POST]
func CreateTrade(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.CreateTradeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ogen.CreateTradeReq{}
	if err = utils.CopyFields(&req, rpcReq); err != nil {
		c.JSON(consts.StatusInternalServerError, &order.CreateTradeRsp{Code: 500, Msg: err.Error()})
		return
	}
	rpcRsp, err := global.OrderClient.CreateTrade(ctx, rpcReq)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &order.CreateTradeRsp{Code: 500, Msg: err.Error()})
		return
	}
	if rpcRsp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &order.CreateTradeRsp{Code: 500, Msg: rpcRsp.Msg})
		fmt.Printf("code: %s - code: %d", rpcRsp.Msg, rpcRsp.Code)
		return
	}
	resp := new(order.CreateTradeRsp)
	if err = utils.CopyFields(&rpcRsp, resp); err != nil {
		c.JSON(consts.StatusInternalServerError, &order.CreateTradeRsp{Code: 500, Msg: err.Error()})
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// ReTrade .
// @router /order/re_trade [POST]
func ReTrade(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.ReTradeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ogen.ReTradeReq{}
	if err = utils.CopyFields(&req, rpcReq); err != nil {
		c.JSON(consts.StatusInternalServerError, &order.ReTradeRsp{Code: 500, Msg: err.Error()})
		return
	}
	rpcRsp, err := global.OrderClient.ReTrade(ctx, rpcReq)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &order.ReTradeRsp{Code: 500, Msg: err.Error()})
		return
	}
	if rpcRsp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &order.ReTradeRsp{Code: 500, Msg: rpcRsp.Msg})
		fmt.Printf("code: %s - code: %d", rpcRsp.Msg, rpcRsp.Code)
		return
	}
	resp := new(order.ReTradeRsp)
	if err = utils.CopyFields(&rpcRsp, resp); err != nil {
		c.JSON(consts.StatusInternalServerError, &order.ReTradeRsp{Code: 500, Msg: err.Error()})
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// CancelTrade .
// @router /order/cancel_trade [POST]
func CancelTrade(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.CancelTradeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ogen.CancelTradeReq{}
	if err = utils.CopyFields(&req, rpcReq); err != nil {
		c.JSON(consts.StatusInternalServerError, &order.CancelTradeRsp{Code: 500, Msg: err.Error()})
		return
	}
	rpcRsp, err := global.OrderClient.CancelTrade(ctx, rpcReq)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &order.CancelTradeRsp{Code: 500, Msg: err.Error()})
		return
	}
	if rpcRsp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &order.CancelTradeRsp{Code: 500, Msg: rpcRsp.Msg})
		fmt.Printf("code: %s - code: %d", rpcRsp.Msg, rpcRsp.Code)
		return
	}
	resp := new(order.CancelTradeRsp)
	if err = utils.CopyFields(&rpcRsp, resp); err != nil {
		c.JSON(consts.StatusInternalServerError, &order.CancelTradeRsp{Code: 500, Msg: err.Error()})
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetOrderItems .
// @router /order/get_order_items [GET]
func GetOrderItems(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.GetOrderItemsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ogen.GetOrderItemsReq{}
	if err = utils.CopyFields(&req, rpcReq); err != nil {
		c.JSON(consts.StatusInternalServerError, &order.GetOrderItemsRsp{Code: 500, Msg: err.Error()})
		return
	}
	rpcRsp, err := global.OrderClient.GetOrderItems(ctx, rpcReq)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &order.GetOrderItemsRsp{Code: 500, Msg: err.Error()})
		return
	}
	if rpcRsp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &order.GetOrderItemsRsp{Code: 500, Msg: rpcRsp.Msg})
		fmt.Printf("code: %s - code: %d", rpcRsp.Msg, rpcRsp.Code)
		return
	}
	resp := new(order.GetOrderItemsRsp)
	if err = utils.CopyFields(&rpcRsp, resp); err != nil {
		c.JSON(consts.StatusInternalServerError, &order.GetOrderItemsRsp{Code: 500, Msg: err.Error()})
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// PaySuccessToOrder .
// @router /order/pay_success_to_order [POST]
func PaySuccessToOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.PaySuccessToOrderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ogen.PaySuccessToOrderReq{}
	if err = utils.CopyFields(&req, rpcReq); err != nil {
		c.JSON(consts.StatusInternalServerError, &order.PaySuccessToOrderRsp{Code: 500, Msg: err.Error()})
		return
	}
	rpcRsp, err := global.OrderClient.PaySuccessToOrder(ctx, rpcReq)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &order.PaySuccessToOrderRsp{Code: 500, Msg: err.Error()})
		return
	}
	if rpcRsp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &order.PaySuccessToOrderRsp{Code: 500, Msg: rpcRsp.Msg})
		fmt.Printf("code: %s - code: %d", rpcRsp.Msg, rpcRsp.Code)
		return
	}
	resp := new(order.PaySuccessToOrderRsp)
	if err = utils.CopyFields(&rpcRsp, resp); err != nil {
		c.JSON(consts.StatusInternalServerError, &order.PaySuccessToOrderRsp{Code: 500, Msg: err.Error()})
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// PayCancelToOrder .
// @router /order/pay_cancel_to_order [POST]
func PayCancelToOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.PayCancelToOrderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ogen.PayCancelToOrderReq{}
	if err = utils.CopyFields(&req, rpcReq); err != nil {
		c.JSON(consts.StatusInternalServerError, &order.PayCancelToOrderRsp{Code: 500, Msg: err.Error()})
		return
	}
	rpcRsp, err := global.OrderClient.PayCancelToOrder(ctx, rpcReq)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &order.PayCancelToOrderRsp{Code: 500, Msg: err.Error()})
		return
	}
	if rpcRsp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &order.PayCancelToOrderRsp{Code: 500, Msg: rpcRsp.Msg})
		fmt.Printf("code: %s - code: %d", rpcRsp.Msg, rpcRsp.Code)
		return
	}
	resp := new(order.PayCancelToOrderRsp)
	if err = utils.CopyFields(&rpcRsp, resp); err != nil {
		c.JSON(consts.StatusInternalServerError, &order.PayCancelToOrderRsp{Code: 500, Msg: err.Error()})
		return
	}
	c.JSON(consts.StatusOK, resp)
}
