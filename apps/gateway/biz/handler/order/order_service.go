// Code generated by hertz generator.

package order

import (
	"context"
	"fmt"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/lzl-here/bt-shop-backend/apps/gateway/global"
	order "github.com/lzl-here/bt-shop-backend/protobuf/kitex_gen/order"
)

// CreateTrade .
// @router /order/create_trade [POST]
func CreateTrade(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.CreateTradeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.OrderClient.CreateTrade(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &order.CreateTradeRsp{
			Code: 500,
			Msg:  err.Error(),
		})
		return
	}

	if resp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &order.CreateTradeRsp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		fmt.Printf("code: %s - code: %d", resp.Msg, resp.Code)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetTradeList .
// @router /order/get_trade_list [POST]
func GetTradeList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.GetTradeListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.OrderClient.GetTradeList(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &order.GetTradeListRsp{
			Code: 500,
			Msg:  err.Error(),
		})
		return
	}

	if resp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &order.GetTradeListRsp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		fmt.Printf("code: %s - code: %d", resp.Msg, resp.Code)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// CancelTrade .
// @router /order/cancel_trade [POST]
func CancelTrade(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.CancelTradeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.OrderClient.CancelTrade(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &order.CancelTradeRsp{
			Code: 500,
			Msg:  err.Error(),
		})
		return
	}

	if resp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &order.CancelTradeRsp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		fmt.Printf("code: %s - code: %d", resp.Msg, resp.Code)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetOrderItems .
// @router /order/get_order_items [POST]
func GetOrderItems(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.GetOrderItemsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.OrderClient.GetOrderItems(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &order.GetOrderItemsRsp{
			Code: 500,
			Msg:  err.Error(),
		})
		return
	}

	if resp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &order.GetOrderItemsRsp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		fmt.Printf("code: %s - code: %d", resp.Msg, resp.Code)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// PaySuccessToOrder .
// @router /order/pay_success_to_order [POST]
func PaySuccessToOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.PaySuccessToOrderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.OrderClient.PaySuccessToOrder(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &order.PaySuccessToOrderRsp{
			Code: 500,
			Msg:  err.Error(),
		})
		return
	}

	if resp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &order.PaySuccessToOrderRsp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		fmt.Printf("code: %s - code: %d", resp.Msg, resp.Code)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// PayCancelToOrder .
// @router /order/pay_cancel_to_order [POST]
func PayCancelToOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.PayCancelToOrderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.OrderClient.PayCancelToOrder(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &order.PayCancelToOrderRsp{
			Code: 500,
			Msg:  err.Error(),
		})
		return
	}

	if resp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &order.PayCancelToOrderRsp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		fmt.Printf("code: %s - code: %d", resp.Msg, resp.Code)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetTradeDetail .
// @router /order/get_trade_detail [POST]
func GetTradeDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.GetTradeDetailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.OrderClient.GetTradeDetail(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &order.GetTradeDetailRsp{
			Code: 500,
			Msg:  err.Error(),
		})
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetOrderDetail .
// @router /order/get_order_detail [POST]
func GetOrderDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.GetOrderDetailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.OrderClient.GetOrderDetail(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &order.GetOrderDetailRsp{
			Code: 500,
			Msg:  err.Error(),
		})
		return
	}
	c.JSON(consts.StatusOK, resp)
}
