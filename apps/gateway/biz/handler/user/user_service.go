// Code generated by hertz generator.

package user

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/lzl-here/bt-shop-backend/apps/gateway/global"
	user "github.com/lzl-here/bt-shop-backend/protobuf/kitex_gen/user"
)

// NormalLogin .
// @router /user/login [POST]
func NormalLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.NormalLoginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.UserClient.NormalLogin(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &user.NormalLoginRsp{
			Code: 500,
			Msg:  err.Error(),
		})
	}

	c.JSON(consts.StatusOK, resp)
}

// NormalRegister .
// @router /user/register [POST]
func NormalRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.NormalRegisterReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.UserClient.NormalRegister(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &user.NormalRegisterRsp{
			Code: 500,
			Msg:  err.Error(),
		})
	}

	c.JSON(consts.StatusOK, resp)
}

// GetUserInfo .
// @router /user/get_user_info [POST]
func GetUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.GetUserInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.UserClient.GetUserInfo(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &user.GetUserInfoRsp{
			Code: 500,
			Msg:  err.Error(),
		})
	}
	c.JSON(consts.StatusOK, resp)
}

// UpdateUserInfo .
// @router /user/update_user_info [POST]
func UpdateUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UpdateUserInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.UserClient.UpdateUserInfo(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &user.UpdateUserInfoRsp{
			Code: 500,
			Msg:  err.Error(),
		})
	}
	c.JSON(consts.StatusOK, resp)
}

// Logout .
// @router /user/logout [POST]
func Logout(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.LogoutReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.LogoutRsp)

	c.JSON(consts.StatusOK, resp)
}
