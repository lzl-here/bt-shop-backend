// Code generated by hertz generator.

package goods

import (
	"context"
	"fmt"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	goods "github.com/lzl-here/bt-shop-backend/apps/gateway/biz/model/goods"
	"github.com/lzl-here/bt-shop-backend/apps/gateway/utils"
	ggen "github.com/lzl-here/bt-shop-backend/kitex_gen/goods"

	"github.com/lzl-here/bt-shop-backend/apps/gateway/global"
)

// GetKeywordDownList .
// @router /goods/get_keyword_down_list [POST]
func GetKeywordDownList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req goods.GetKeywordDownListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ggen.GetKeywordDownListReq{}
	if err = utils.CopyFields(&req, rpcReq); err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.GetKeywordDownListRsp{Code: 500, Msg: err.Error()})
		return
	}
	rpcRsp, err := global.GoodsClient.GetKeywordDownList(ctx, rpcReq)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.GetKeywordDownListRsp{Code: 500, Msg: err.Error()})
		return
	}
	if rpcRsp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &goods.GetKeywordDownListRsp{Code: 500, Msg: rpcRsp.Msg})
		fmt.Printf("code: %s - code: %d", rpcRsp.Msg, rpcRsp.Code)
		return
	}
	resp := new(goods.GetKeywordDownListRsp)
	if err = utils.CopyFields(&rpcRsp, resp); err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.GetKeywordDownListRsp{Code: 500, Msg: err.Error()})
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// SearchSpuList .
// @router /goods/search_spu_list [POST]
func SearchSpuList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req goods.SearchSpuListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	rpcReq := &ggen.SearchSpuListReq{}
	if err = utils.CopyFields(&req, rpcReq); err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.SearchSpuListRsp{Code: 500, Msg: err.Error()})
		return
	}
	rpcRsp, err := global.GoodsClient.SearchSpuList(ctx, rpcReq)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.SearchSpuListRsp{Code: 500, Msg: err.Error()})
		return
	}
	resp := new(goods.SearchSpuListRsp)
	if err = utils.CopyFields(&rpcRsp, resp); err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.SearchSpuListRsp{Code: 500, Msg: err.Error()})
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetGoodsDetail .
// @router /goods/get_goods_detail [POST]
func GetGoodsDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req goods.GetGoodsDetailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ggen.GetGoodsDetailReq{}
	if err = utils.CopyFields(&req, rpcReq); err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.GetGoodsDetailRsp{Code: 500, Msg: err.Error()})
		return
	}
	rpcRsp, err := global.GoodsClient.GetGoodsDetail(ctx, rpcReq)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.GetGoodsDetailRsp{Code: 500, Msg: err.Error()})
		return
	}
	if rpcRsp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &goods.GetGoodsDetailRsp{Code: 500, Msg: rpcRsp.Msg})
		fmt.Printf("code: %s - code: %d", rpcRsp.Msg, rpcRsp.Code)
		return
	}
	resp := new(goods.GetGoodsDetailRsp)
	if err = utils.CopyFields(&rpcRsp, resp); err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.GetGoodsDetailRsp{Code: 500, Msg: err.Error()})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetGoodsList .
// @router /goods/get_goods_list [POST]
func GetGoodsList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req goods.GetGoodsListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ggen.GetGoodsListReq{}
	if err := utils.CopyFields(&req, rpcReq); err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.GetGoodsListRsp{Code: 500, Msg: err.Error()})
		return
	}
	rpcRsp, err := global.GoodsClient.GetGoodsList(ctx, rpcReq)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.GetGoodsListRsp{Code: 500, Msg: err.Error()})
		return
	}

	resp := new(goods.GetGoodsListRsp)

	if err = utils.CopyFields(rpcRsp, resp); err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.GetGoodsListRsp{Code: 500, Msg: err.Error()})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetCategoryList .
// @router /goods/get_category_list [POST]
func GetCategoryList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req goods.GetCategoryListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ggen.GetCategoryListReq{}
	if err = utils.CopyFields(&req, rpcReq); err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.GetCategoryListRsp{Code: 500, Msg: err.Error()})
		return
	}
	rpcRsp, err := global.GoodsClient.GetCategoryList(ctx, rpcReq)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.GetCategoryListRsp{Code: 500, Msg: err.Error()})
		return
	}
	if rpcRsp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &goods.GetCategoryListRsp{Code: 500, Msg: rpcRsp.Msg})
		fmt.Printf("code: %s - code: %d", rpcRsp.Msg, rpcRsp.Code)
		return
	}
	resp := new(goods.GetCategoryListRsp)
	if err = utils.CopyFields(&rpcRsp, resp); err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.GetCategoryListRsp{Code: 500, Msg: err.Error()})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetBrandList .
// @router /goods/get_brand_list [POST]
func GetBrandList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req goods.GetBrandListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	rpcReq := &ggen.GetBrandListReq{}
	if err = utils.CopyFields(&req, rpcReq); err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.GetBrandListRsp{Code: 500, Msg: err.Error()})
		return
	}
	rpcRsp, err := global.GoodsClient.GetBrandList(ctx, rpcReq)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.GetBrandListRsp{Code: 500, Msg: err.Error()})
		return
	}
	if rpcRsp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &goods.GetBrandListRsp{Code: 500, Msg: rpcRsp.Msg})
		fmt.Printf("code: %s - code: %d", rpcRsp.Msg, rpcRsp.Code)
		return
	}
	resp := new(goods.GetBrandListRsp)
	if err = utils.CopyFields(&rpcRsp, resp); err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.GetBrandListRsp{Code: 500, Msg: err.Error()})
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// AddToCart .
// @router /goods/add_to_cart [POST]
func AddToCart(ctx context.Context, c *app.RequestContext) {
	var err error
	var req goods.AddToCartReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ggen.AddToCartReq{}
	if err = utils.CopyFields(&req, rpcReq); err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.AddToCartRsp{Code: 500, Msg: err.Error()})
		return
	}
	rpcRsp, err := global.GoodsClient.AddToCart(ctx, rpcReq)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.AddToCartRsp{Code: 500, Msg: err.Error()})
		return
	}
	if rpcRsp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &goods.AddToCartRsp{Code: 500, Msg: rpcRsp.Msg})
		fmt.Printf("code: %s - code: %d", rpcRsp.Msg, rpcRsp.Code)
		return
	}
	resp := new(goods.AddToCartRsp)
	if err = utils.CopyFields(&rpcRsp, resp); err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.AddToCartRsp{Code: 500, Msg: err.Error()})
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// PublishGoods .
// @router /goods/publish_goods [POST]
func PublishGoods(ctx context.Context, c *app.RequestContext) {
	var err error
	var req goods.PublishGoodsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ggen.PublishGoodsReq{}
	if err = utils.CopyFields(&req, rpcReq); err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.PublishGoodsRsp{Code: 500, Msg: err.Error()})
		return
	}
	rpcRsp, err := global.GoodsClient.PublishGoods(ctx, rpcReq)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.PublishGoodsRsp{Code: 500, Msg: err.Error()})
		return
	}
	if rpcRsp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &goods.PublishGoodsRsp{Code: 500, Msg: rpcRsp.Msg})
		fmt.Printf("code: %s - code: %d", rpcRsp.Msg, rpcRsp.Code)
		return
	}
	resp := new(goods.PublishGoodsRsp)
	if err = utils.CopyFields(&rpcRsp, resp); err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.PublishGoodsRsp{Code: 500, Msg: err.Error()})
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// StockReduce .
// @router /goods/stock_reduce [POST]
func StockReduce(ctx context.Context, c *app.RequestContext) {
	var err error
	var req goods.StockReduceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ggen.StockReduceReq{}
	if err = utils.CopyFields(&req, rpcReq); err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.StockReduceRsp{Code: 500, Msg: err.Error()})
		return
	}
	rpcRsp, err := global.GoodsClient.StockReduce(ctx, rpcReq)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.StockReduceRsp{Code: 500, Msg: err.Error()})
		return
	}
	if rpcRsp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &goods.StockReduceRsp{Code: 500, Msg: rpcRsp.Msg})
		fmt.Printf("code: %s - code: %d", rpcRsp.Msg, rpcRsp.Code)
		return
	}
	resp := new(goods.StockReduceRsp)
	if err = utils.CopyFields(&rpcRsp, resp); err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.StockReduceRsp{Code: 500, Msg: err.Error()})
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// StockIncrease .
// @router /goods/stock_increase [POST]
func StockIncrease(ctx context.Context, c *app.RequestContext) {
	var err error
	var req goods.StockIncreaseReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcReq := &ggen.StockIncreaseReq{}
	if err = utils.CopyFields(&req, rpcReq); err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.StockIncreaseRsp{Code: 500, Msg: err.Error()})
		return
	}
	rpcRsp, err := global.GoodsClient.StockIncrease(ctx, rpcReq)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.StockIncreaseRsp{Code: 500, Msg: err.Error()})
		return
	}
	if rpcRsp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &goods.StockIncreaseRsp{Code: 500, Msg: rpcRsp.Msg})
		fmt.Printf("code: %s - code: %d", rpcRsp.Msg, rpcRsp.Code)
		return
	}
	resp := new(goods.StockIncreaseRsp)
	if err = utils.CopyFields(&rpcRsp, resp); err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.StockIncreaseRsp{Code: 500, Msg: err.Error()})
		return
	}
	c.JSON(consts.StatusOK, resp)
}
