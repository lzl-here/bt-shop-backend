// Code generated by hertz generator.

package goods

import (
	"context"
	"fmt"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/lzl-here/bt-shop-backend/apps/gateway/global"
	goods "github.com/lzl-here/bt-shop-backend/protobuf/kitex_gen/goods"
)

// GetKeywordDownList .
// @router /goods/get_keyword_down_list [POST]
func GetKeywordDownList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req goods.GetKeywordDownListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(goods.GetKeywordDownListRsp)

	resp, err = global.GoodsClient.GetKeywordDownList(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// SearchSpuList .
// @router /goods/search_spu_list [POST]
func SearchSpuList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req goods.SearchSpuListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(goods.SearchSpuListRsp)
	resp, err = global.GoodsClient.SearchSpuList(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetGoodsDetail .
// @router /goods/get_goods_detail [POST]
func GetGoodsDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req goods.GetGoodsDetailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.GoodsClient.GetGoodsDetail(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.GetGoodsDetailRsp{
			Code: 500,
			Msg:  err.Error(),
		})
		return
	}

	if resp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &goods.GetGoodsDetailRsp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		fmt.Printf("code: %s - code: %d", resp.Msg, resp.Code)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetGoodsList .
// @router /goods/get_goods_list [POST]
func GetGoodsList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req goods.GetGoodsListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.GoodsClient.GetGoodsList(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.GetGoodsListRsp{
			Code: 500,
			Msg:  err.Error(),
		})
		return
	}

	if resp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &goods.GetGoodsListRsp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		fmt.Printf("code: %s - code: %d", resp.Msg, resp.Code)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetCategoryList .
// @router /goods/get_category_list [POST]
func GetCategoryList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req goods.GetCategoryListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.GoodsClient.GetCategoryList(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.GetCategoryListRsp{
			Code: 500,
			Msg:  err.Error(),
		})
		return
	}

	if resp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &goods.GetCategoryListRsp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		fmt.Printf("code: %s - code: %d", resp.Msg, resp.Code)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetBrandList .
// @router /goods/get_brand_list [POST]
func GetBrandList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req goods.GetBrandListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.GoodsClient.GetBrandList(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.GetBrandListRsp{
			Code: 500,
			Msg:  err.Error(),
		})
		return
	}

	if resp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &goods.GetBrandListRsp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		fmt.Printf("code: %s - code: %d", resp.Msg, resp.Code)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// AddToCart .
// @router /goods/add_to_cart [POST]
func AddToCart(ctx context.Context, c *app.RequestContext) {
	var err error
	var req goods.AddToCartReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.GoodsClient.AddToCart(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.AddToCartRsp{
			Code: 500,
			Msg:  err.Error(),
		})
		return
	}

	if resp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &goods.AddToCartRsp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		fmt.Printf("code: %s - code: %d", resp.Msg, resp.Code)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// PublishGoods .
// @router /goods/publish_goods [POST]
func PublishGoods(ctx context.Context, c *app.RequestContext) {
	var err error
	var req goods.PublishGoodsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.GoodsClient.PublishGoods(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.PublishGoodsRsp{
			Code: 500,
			Msg:  err.Error(),
		})
		return
	}

	if resp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &goods.PublishGoodsRsp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		fmt.Printf("code: %s - code: %d", resp.Msg, resp.Code)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// StockReduce .
// @router /goods/stock_reduce [POST]
func StockReduce(ctx context.Context, c *app.RequestContext) {
	var err error
	var req goods.StockReduceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.GoodsClient.StockReduce(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.StockReduceRsp{
			Code: 500,
			Msg:  err.Error(),
		})
		return
	}

	if resp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &goods.StockReduceRsp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		fmt.Printf("code: %s - code: %d", resp.Msg, resp.Code)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// StockIncrease .
// @router /goods/stock_increase [POST]
func StockIncrease(ctx context.Context, c *app.RequestContext) {
	var err error
	var req goods.StockIncreaseReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.GoodsClient.StockIncrease(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &goods.StockIncreaseRsp{
			Code: 500,
			Msg:  err.Error(),
		})
		return
	}

	if resp.Code != 1 {
		c.JSON(consts.StatusInternalServerError, &goods.StockIncreaseRsp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		fmt.Printf("code: %s - code: %d", resp.Msg, resp.Code)
		return
	}

	c.JSON(consts.StatusOK, resp)
}
