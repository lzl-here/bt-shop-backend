// Code generated by Kitex v0.12.1. DO NOT EDIT.

package orderservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	order "github.com/lzl-here/bt-shop-backend/kitex_gen/order"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateTrade": kitex.NewMethodInfo(
		createTradeHandler,
		newCreateTradeArgs,
		newCreateTradeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CancelTrade": kitex.NewMethodInfo(
		cancelTradeHandler,
		newCancelTradeArgs,
		newCancelTradeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	orderServiceServiceInfo                = NewServiceInfo()
	orderServiceServiceInfoForClient       = NewServiceInfoForClient()
	orderServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return orderServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return orderServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return orderServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "OrderService"
	handlerType := (*order.OrderService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "order",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func createTradeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(order.CreateTradeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(order.OrderService).CreateTrade(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateTradeArgs:
		success, err := handler.(order.OrderService).CreateTrade(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateTradeResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateTradeArgs() interface{} {
	return &CreateTradeArgs{}
}

func newCreateTradeResult() interface{} {
	return &CreateTradeResult{}
}

type CreateTradeArgs struct {
	Req *order.CreateTradeReq
}

func (p *CreateTradeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(order.CreateTradeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateTradeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateTradeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateTradeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateTradeArgs) Unmarshal(in []byte) error {
	msg := new(order.CreateTradeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateTradeArgs_Req_DEFAULT *order.CreateTradeReq

func (p *CreateTradeArgs) GetReq() *order.CreateTradeReq {
	if !p.IsSetReq() {
		return CreateTradeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateTradeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateTradeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateTradeResult struct {
	Success *order.CreateTradeRsp
}

var CreateTradeResult_Success_DEFAULT *order.CreateTradeRsp

func (p *CreateTradeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(order.CreateTradeRsp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateTradeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateTradeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateTradeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateTradeResult) Unmarshal(in []byte) error {
	msg := new(order.CreateTradeRsp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateTradeResult) GetSuccess() *order.CreateTradeRsp {
	if !p.IsSetSuccess() {
		return CreateTradeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateTradeResult) SetSuccess(x interface{}) {
	p.Success = x.(*order.CreateTradeRsp)
}

func (p *CreateTradeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateTradeResult) GetResult() interface{} {
	return p.Success
}

func cancelTradeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(order.CancelTradeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(order.OrderService).CancelTrade(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CancelTradeArgs:
		success, err := handler.(order.OrderService).CancelTrade(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CancelTradeResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCancelTradeArgs() interface{} {
	return &CancelTradeArgs{}
}

func newCancelTradeResult() interface{} {
	return &CancelTradeResult{}
}

type CancelTradeArgs struct {
	Req *order.CancelTradeReq
}

func (p *CancelTradeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(order.CancelTradeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CancelTradeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CancelTradeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CancelTradeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CancelTradeArgs) Unmarshal(in []byte) error {
	msg := new(order.CancelTradeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CancelTradeArgs_Req_DEFAULT *order.CancelTradeReq

func (p *CancelTradeArgs) GetReq() *order.CancelTradeReq {
	if !p.IsSetReq() {
		return CancelTradeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CancelTradeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CancelTradeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CancelTradeResult struct {
	Success *order.CancelTradeRsp
}

var CancelTradeResult_Success_DEFAULT *order.CancelTradeRsp

func (p *CancelTradeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(order.CancelTradeRsp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CancelTradeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CancelTradeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CancelTradeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CancelTradeResult) Unmarshal(in []byte) error {
	msg := new(order.CancelTradeRsp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CancelTradeResult) GetSuccess() *order.CancelTradeRsp {
	if !p.IsSetSuccess() {
		return CancelTradeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CancelTradeResult) SetSuccess(x interface{}) {
	p.Success = x.(*order.CancelTradeRsp)
}

func (p *CancelTradeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CancelTradeResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateTrade(ctx context.Context, Req *order.CreateTradeReq) (r *order.CreateTradeRsp, err error) {
	var _args CreateTradeArgs
	_args.Req = Req
	var _result CreateTradeResult
	if err = p.c.Call(ctx, "CreateTrade", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CancelTrade(ctx context.Context, Req *order.CancelTradeReq) (r *order.CancelTradeRsp, err error) {
	var _args CancelTradeArgs
	_args.Req = Req
	var _result CancelTradeResult
	if err = p.c.Call(ctx, "CancelTrade", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
