// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package person

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *GetPersonReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPersonReq[number], err)
}

func (x *GetPersonReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *GetPersonRsp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPersonRsp[number], err)
}

func (x *GetPersonRsp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *GetPersonRsp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPersonRsp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.LogId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPersonRsp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v GetPersonRsp_PersonInfoData
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Data = &v
	return offset, nil
}

func (x *GetPersonRsp_PersonInfoData) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPersonRsp_PersonInfoData[number], err)
}

func (x *GetPersonRsp_PersonInfoData) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *GetPersonRsp_PersonInfoData) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.NickName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPersonRsp_PersonInfoData) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.AvatarUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPersonRsp_PersonInfoData) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Desc, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPersonRsp_PersonInfoData) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CreatedAt, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPersonRsp_PersonInfoData) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.UpdatedAt, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPersonRsp_PersonInfoData) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.DeletedAt, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPersonReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetPersonReq) fastWriteField1(buf []byte) (offset int) {
	if x.Uid == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetUid())
	return offset
}

func (x *GetPersonRsp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *GetPersonRsp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *GetPersonRsp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *GetPersonRsp) fastWriteField3(buf []byte) (offset int) {
	if x.LogId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetLogId())
	return offset
}

func (x *GetPersonRsp) fastWriteField4(buf []byte) (offset int) {
	if x.Data == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 4, x.GetData())
	return offset
}

func (x *GetPersonRsp_PersonInfoData) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *GetPersonRsp_PersonInfoData) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *GetPersonRsp_PersonInfoData) fastWriteField2(buf []byte) (offset int) {
	if x.NickName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetNickName())
	return offset
}

func (x *GetPersonRsp_PersonInfoData) fastWriteField3(buf []byte) (offset int) {
	if x.AvatarUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetAvatarUrl())
	return offset
}

func (x *GetPersonRsp_PersonInfoData) fastWriteField4(buf []byte) (offset int) {
	if x.Desc == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetDesc())
	return offset
}

func (x *GetPersonRsp_PersonInfoData) fastWriteField5(buf []byte) (offset int) {
	if x.CreatedAt == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetCreatedAt())
	return offset
}

func (x *GetPersonRsp_PersonInfoData) fastWriteField6(buf []byte) (offset int) {
	if x.UpdatedAt == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetUpdatedAt())
	return offset
}

func (x *GetPersonRsp_PersonInfoData) fastWriteField7(buf []byte) (offset int) {
	if x.DeletedAt == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetDeletedAt())
	return offset
}

func (x *GetPersonReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetPersonReq) sizeField1() (n int) {
	if x.Uid == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetUid())
	return n
}

func (x *GetPersonRsp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *GetPersonRsp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetCode())
	return n
}

func (x *GetPersonRsp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *GetPersonRsp) sizeField3() (n int) {
	if x.LogId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetLogId())
	return n
}

func (x *GetPersonRsp) sizeField4() (n int) {
	if x.Data == nil {
		return n
	}
	n += fastpb.SizeMessage(4, x.GetData())
	return n
}

func (x *GetPersonRsp_PersonInfoData) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *GetPersonRsp_PersonInfoData) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetId())
	return n
}

func (x *GetPersonRsp_PersonInfoData) sizeField2() (n int) {
	if x.NickName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetNickName())
	return n
}

func (x *GetPersonRsp_PersonInfoData) sizeField3() (n int) {
	if x.AvatarUrl == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetAvatarUrl())
	return n
}

func (x *GetPersonRsp_PersonInfoData) sizeField4() (n int) {
	if x.Desc == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetDesc())
	return n
}

func (x *GetPersonRsp_PersonInfoData) sizeField5() (n int) {
	if x.CreatedAt == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetCreatedAt())
	return n
}

func (x *GetPersonRsp_PersonInfoData) sizeField6() (n int) {
	if x.UpdatedAt == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetUpdatedAt())
	return n
}

func (x *GetPersonRsp_PersonInfoData) sizeField7() (n int) {
	if x.DeletedAt == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetDeletedAt())
	return n
}

var fieldIDToName_GetPersonReq = map[int32]string{
	1: "Uid",
}

var fieldIDToName_GetPersonRsp = map[int32]string{
	1: "Code",
	2: "Msg",
	3: "LogId",
	4: "Data",
}

var fieldIDToName_GetPersonRsp_PersonInfoData = map[int32]string{
	1: "Id",
	2: "NickName",
	3: "AvatarUrl",
	4: "Desc",
	5: "CreatedAt",
	6: "UpdatedAt",
	7: "DeletedAt",
}
