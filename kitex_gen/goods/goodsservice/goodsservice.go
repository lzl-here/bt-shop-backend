// Code generated by Kitex v0.12.1. DO NOT EDIT.

package goodsservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	goods "github.com/lzl-here/bt-shop-backend/kitex_gen/goods"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetKeywordDownList": kitex.NewMethodInfo(
		getKeywordDownListHandler,
		newGetKeywordDownListArgs,
		newGetKeywordDownListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SearchSpuList": kitex.NewMethodInfo(
		searchSpuListHandler,
		newSearchSpuListArgs,
		newSearchSpuListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetGoodsDetail": kitex.NewMethodInfo(
		getGoodsDetailHandler,
		newGetGoodsDetailArgs,
		newGetGoodsDetailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetGoodsList": kitex.NewMethodInfo(
		getGoodsListHandler,
		newGetGoodsListArgs,
		newGetGoodsListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetCategoryList": kitex.NewMethodInfo(
		getCategoryListHandler,
		newGetCategoryListArgs,
		newGetCategoryListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"AddToCart": kitex.NewMethodInfo(
		addToCartHandler,
		newAddToCartArgs,
		newAddToCartResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"PublishGoods": kitex.NewMethodInfo(
		publishGoodsHandler,
		newPublishGoodsArgs,
		newPublishGoodsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	goodsServiceServiceInfo                = NewServiceInfo()
	goodsServiceServiceInfoForClient       = NewServiceInfoForClient()
	goodsServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return goodsServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return goodsServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return goodsServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "GoodsService"
	handlerType := (*goods.GoodsService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "goods",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func getKeywordDownListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(goods.GetKeywordDownListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(goods.GoodsService).GetKeywordDownList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetKeywordDownListArgs:
		success, err := handler.(goods.GoodsService).GetKeywordDownList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetKeywordDownListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetKeywordDownListArgs() interface{} {
	return &GetKeywordDownListArgs{}
}

func newGetKeywordDownListResult() interface{} {
	return &GetKeywordDownListResult{}
}

type GetKeywordDownListArgs struct {
	Req *goods.GetKeywordDownListReq
}

func (p *GetKeywordDownListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(goods.GetKeywordDownListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetKeywordDownListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetKeywordDownListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetKeywordDownListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetKeywordDownListArgs) Unmarshal(in []byte) error {
	msg := new(goods.GetKeywordDownListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetKeywordDownListArgs_Req_DEFAULT *goods.GetKeywordDownListReq

func (p *GetKeywordDownListArgs) GetReq() *goods.GetKeywordDownListReq {
	if !p.IsSetReq() {
		return GetKeywordDownListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetKeywordDownListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetKeywordDownListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetKeywordDownListResult struct {
	Success *goods.GetKeywordDownListRsp
}

var GetKeywordDownListResult_Success_DEFAULT *goods.GetKeywordDownListRsp

func (p *GetKeywordDownListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(goods.GetKeywordDownListRsp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetKeywordDownListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetKeywordDownListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetKeywordDownListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetKeywordDownListResult) Unmarshal(in []byte) error {
	msg := new(goods.GetKeywordDownListRsp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetKeywordDownListResult) GetSuccess() *goods.GetKeywordDownListRsp {
	if !p.IsSetSuccess() {
		return GetKeywordDownListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetKeywordDownListResult) SetSuccess(x interface{}) {
	p.Success = x.(*goods.GetKeywordDownListRsp)
}

func (p *GetKeywordDownListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetKeywordDownListResult) GetResult() interface{} {
	return p.Success
}

func searchSpuListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(goods.SearchSpuListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(goods.GoodsService).SearchSpuList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SearchSpuListArgs:
		success, err := handler.(goods.GoodsService).SearchSpuList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SearchSpuListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSearchSpuListArgs() interface{} {
	return &SearchSpuListArgs{}
}

func newSearchSpuListResult() interface{} {
	return &SearchSpuListResult{}
}

type SearchSpuListArgs struct {
	Req *goods.SearchSpuListReq
}

func (p *SearchSpuListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(goods.SearchSpuListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SearchSpuListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SearchSpuListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SearchSpuListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SearchSpuListArgs) Unmarshal(in []byte) error {
	msg := new(goods.SearchSpuListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SearchSpuListArgs_Req_DEFAULT *goods.SearchSpuListReq

func (p *SearchSpuListArgs) GetReq() *goods.SearchSpuListReq {
	if !p.IsSetReq() {
		return SearchSpuListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SearchSpuListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SearchSpuListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SearchSpuListResult struct {
	Success *goods.SearchSpuListRsp
}

var SearchSpuListResult_Success_DEFAULT *goods.SearchSpuListRsp

func (p *SearchSpuListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(goods.SearchSpuListRsp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SearchSpuListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SearchSpuListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SearchSpuListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SearchSpuListResult) Unmarshal(in []byte) error {
	msg := new(goods.SearchSpuListRsp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SearchSpuListResult) GetSuccess() *goods.SearchSpuListRsp {
	if !p.IsSetSuccess() {
		return SearchSpuListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SearchSpuListResult) SetSuccess(x interface{}) {
	p.Success = x.(*goods.SearchSpuListRsp)
}

func (p *SearchSpuListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SearchSpuListResult) GetResult() interface{} {
	return p.Success
}

func getGoodsDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(goods.GetGoodsDetailReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(goods.GoodsService).GetGoodsDetail(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetGoodsDetailArgs:
		success, err := handler.(goods.GoodsService).GetGoodsDetail(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetGoodsDetailResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetGoodsDetailArgs() interface{} {
	return &GetGoodsDetailArgs{}
}

func newGetGoodsDetailResult() interface{} {
	return &GetGoodsDetailResult{}
}

type GetGoodsDetailArgs struct {
	Req *goods.GetGoodsDetailReq
}

func (p *GetGoodsDetailArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(goods.GetGoodsDetailReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetGoodsDetailArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetGoodsDetailArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetGoodsDetailArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetGoodsDetailArgs) Unmarshal(in []byte) error {
	msg := new(goods.GetGoodsDetailReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetGoodsDetailArgs_Req_DEFAULT *goods.GetGoodsDetailReq

func (p *GetGoodsDetailArgs) GetReq() *goods.GetGoodsDetailReq {
	if !p.IsSetReq() {
		return GetGoodsDetailArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetGoodsDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetGoodsDetailArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetGoodsDetailResult struct {
	Success *goods.GetGoodsDetailRsp
}

var GetGoodsDetailResult_Success_DEFAULT *goods.GetGoodsDetailRsp

func (p *GetGoodsDetailResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(goods.GetGoodsDetailRsp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetGoodsDetailResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetGoodsDetailResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetGoodsDetailResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetGoodsDetailResult) Unmarshal(in []byte) error {
	msg := new(goods.GetGoodsDetailRsp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetGoodsDetailResult) GetSuccess() *goods.GetGoodsDetailRsp {
	if !p.IsSetSuccess() {
		return GetGoodsDetailResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetGoodsDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*goods.GetGoodsDetailRsp)
}

func (p *GetGoodsDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetGoodsDetailResult) GetResult() interface{} {
	return p.Success
}

func getGoodsListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(goods.GetGoodsListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(goods.GoodsService).GetGoodsList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetGoodsListArgs:
		success, err := handler.(goods.GoodsService).GetGoodsList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetGoodsListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetGoodsListArgs() interface{} {
	return &GetGoodsListArgs{}
}

func newGetGoodsListResult() interface{} {
	return &GetGoodsListResult{}
}

type GetGoodsListArgs struct {
	Req *goods.GetGoodsListReq
}

func (p *GetGoodsListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(goods.GetGoodsListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetGoodsListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetGoodsListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetGoodsListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetGoodsListArgs) Unmarshal(in []byte) error {
	msg := new(goods.GetGoodsListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetGoodsListArgs_Req_DEFAULT *goods.GetGoodsListReq

func (p *GetGoodsListArgs) GetReq() *goods.GetGoodsListReq {
	if !p.IsSetReq() {
		return GetGoodsListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetGoodsListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetGoodsListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetGoodsListResult struct {
	Success *goods.GetGoodsListRsp
}

var GetGoodsListResult_Success_DEFAULT *goods.GetGoodsListRsp

func (p *GetGoodsListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(goods.GetGoodsListRsp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetGoodsListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetGoodsListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetGoodsListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetGoodsListResult) Unmarshal(in []byte) error {
	msg := new(goods.GetGoodsListRsp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetGoodsListResult) GetSuccess() *goods.GetGoodsListRsp {
	if !p.IsSetSuccess() {
		return GetGoodsListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetGoodsListResult) SetSuccess(x interface{}) {
	p.Success = x.(*goods.GetGoodsListRsp)
}

func (p *GetGoodsListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetGoodsListResult) GetResult() interface{} {
	return p.Success
}

func getCategoryListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(goods.GetCategoryListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(goods.GoodsService).GetCategoryList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetCategoryListArgs:
		success, err := handler.(goods.GoodsService).GetCategoryList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetCategoryListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetCategoryListArgs() interface{} {
	return &GetCategoryListArgs{}
}

func newGetCategoryListResult() interface{} {
	return &GetCategoryListResult{}
}

type GetCategoryListArgs struct {
	Req *goods.GetCategoryListReq
}

func (p *GetCategoryListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(goods.GetCategoryListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetCategoryListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetCategoryListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetCategoryListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetCategoryListArgs) Unmarshal(in []byte) error {
	msg := new(goods.GetCategoryListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetCategoryListArgs_Req_DEFAULT *goods.GetCategoryListReq

func (p *GetCategoryListArgs) GetReq() *goods.GetCategoryListReq {
	if !p.IsSetReq() {
		return GetCategoryListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetCategoryListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetCategoryListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetCategoryListResult struct {
	Success *goods.GetCategoryListRsp
}

var GetCategoryListResult_Success_DEFAULT *goods.GetCategoryListRsp

func (p *GetCategoryListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(goods.GetCategoryListRsp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetCategoryListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetCategoryListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetCategoryListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetCategoryListResult) Unmarshal(in []byte) error {
	msg := new(goods.GetCategoryListRsp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetCategoryListResult) GetSuccess() *goods.GetCategoryListRsp {
	if !p.IsSetSuccess() {
		return GetCategoryListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetCategoryListResult) SetSuccess(x interface{}) {
	p.Success = x.(*goods.GetCategoryListRsp)
}

func (p *GetCategoryListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCategoryListResult) GetResult() interface{} {
	return p.Success
}

func addToCartHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(goods.AddToCartReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(goods.GoodsService).AddToCart(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *AddToCartArgs:
		success, err := handler.(goods.GoodsService).AddToCart(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddToCartResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newAddToCartArgs() interface{} {
	return &AddToCartArgs{}
}

func newAddToCartResult() interface{} {
	return &AddToCartResult{}
}

type AddToCartArgs struct {
	Req *goods.AddToCartReq
}

func (p *AddToCartArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(goods.AddToCartReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddToCartArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddToCartArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddToCartArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AddToCartArgs) Unmarshal(in []byte) error {
	msg := new(goods.AddToCartReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddToCartArgs_Req_DEFAULT *goods.AddToCartReq

func (p *AddToCartArgs) GetReq() *goods.AddToCartReq {
	if !p.IsSetReq() {
		return AddToCartArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddToCartArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AddToCartArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AddToCartResult struct {
	Success *goods.AddToCartRsp
}

var AddToCartResult_Success_DEFAULT *goods.AddToCartRsp

func (p *AddToCartResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(goods.AddToCartRsp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddToCartResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddToCartResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddToCartResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AddToCartResult) Unmarshal(in []byte) error {
	msg := new(goods.AddToCartRsp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddToCartResult) GetSuccess() *goods.AddToCartRsp {
	if !p.IsSetSuccess() {
		return AddToCartResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddToCartResult) SetSuccess(x interface{}) {
	p.Success = x.(*goods.AddToCartRsp)
}

func (p *AddToCartResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddToCartResult) GetResult() interface{} {
	return p.Success
}

func publishGoodsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(goods.PublishGoodsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(goods.GoodsService).PublishGoods(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *PublishGoodsArgs:
		success, err := handler.(goods.GoodsService).PublishGoods(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PublishGoodsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newPublishGoodsArgs() interface{} {
	return &PublishGoodsArgs{}
}

func newPublishGoodsResult() interface{} {
	return &PublishGoodsResult{}
}

type PublishGoodsArgs struct {
	Req *goods.PublishGoodsReq
}

func (p *PublishGoodsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(goods.PublishGoodsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *PublishGoodsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *PublishGoodsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *PublishGoodsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *PublishGoodsArgs) Unmarshal(in []byte) error {
	msg := new(goods.PublishGoodsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PublishGoodsArgs_Req_DEFAULT *goods.PublishGoodsReq

func (p *PublishGoodsArgs) GetReq() *goods.PublishGoodsReq {
	if !p.IsSetReq() {
		return PublishGoodsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PublishGoodsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PublishGoodsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type PublishGoodsResult struct {
	Success *goods.PublishGoodsRsp
}

var PublishGoodsResult_Success_DEFAULT *goods.PublishGoodsRsp

func (p *PublishGoodsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(goods.PublishGoodsRsp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *PublishGoodsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *PublishGoodsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *PublishGoodsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *PublishGoodsResult) Unmarshal(in []byte) error {
	msg := new(goods.PublishGoodsRsp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PublishGoodsResult) GetSuccess() *goods.PublishGoodsRsp {
	if !p.IsSetSuccess() {
		return PublishGoodsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PublishGoodsResult) SetSuccess(x interface{}) {
	p.Success = x.(*goods.PublishGoodsRsp)
}

func (p *PublishGoodsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PublishGoodsResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetKeywordDownList(ctx context.Context, Req *goods.GetKeywordDownListReq) (r *goods.GetKeywordDownListRsp, err error) {
	var _args GetKeywordDownListArgs
	_args.Req = Req
	var _result GetKeywordDownListResult
	if err = p.c.Call(ctx, "GetKeywordDownList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchSpuList(ctx context.Context, Req *goods.SearchSpuListReq) (r *goods.SearchSpuListRsp, err error) {
	var _args SearchSpuListArgs
	_args.Req = Req
	var _result SearchSpuListResult
	if err = p.c.Call(ctx, "SearchSpuList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetGoodsDetail(ctx context.Context, Req *goods.GetGoodsDetailReq) (r *goods.GetGoodsDetailRsp, err error) {
	var _args GetGoodsDetailArgs
	_args.Req = Req
	var _result GetGoodsDetailResult
	if err = p.c.Call(ctx, "GetGoodsDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetGoodsList(ctx context.Context, Req *goods.GetGoodsListReq) (r *goods.GetGoodsListRsp, err error) {
	var _args GetGoodsListArgs
	_args.Req = Req
	var _result GetGoodsListResult
	if err = p.c.Call(ctx, "GetGoodsList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCategoryList(ctx context.Context, Req *goods.GetCategoryListReq) (r *goods.GetCategoryListRsp, err error) {
	var _args GetCategoryListArgs
	_args.Req = Req
	var _result GetCategoryListResult
	if err = p.c.Call(ctx, "GetCategoryList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddToCart(ctx context.Context, Req *goods.AddToCartReq) (r *goods.AddToCartRsp, err error) {
	var _args AddToCartArgs
	_args.Req = Req
	var _result AddToCartResult
	if err = p.c.Call(ctx, "AddToCart", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishGoods(ctx context.Context, Req *goods.PublishGoodsReq) (r *goods.PublishGoodsRsp, err error) {
	var _args PublishGoodsArgs
	_args.Req = Req
	var _result PublishGoodsResult
	if err = p.c.Call(ctx, "PublishGoods", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
