// Code generated by Kitex v0.12.1. DO NOT EDIT.

package payservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	pay "github.com/lzl-here/bt-shop-backend/kitex_gen/pay"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Pay": kitex.NewMethodInfo(
		payHandler,
		newPayArgs,
		newPayResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"AlipayWebhook": kitex.NewMethodInfo(
		alipayWebhookHandler,
		newAlipayWebhookArgs,
		newAlipayWebhookResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ClosePay": kitex.NewMethodInfo(
		closePayHandler,
		newClosePayArgs,
		newClosePayResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"RefundPay": kitex.NewMethodInfo(
		refundPayHandler,
		newRefundPayArgs,
		newRefundPayResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	payServiceServiceInfo                = NewServiceInfo()
	payServiceServiceInfoForClient       = NewServiceInfoForClient()
	payServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return payServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return payServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return payServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "PayService"
	handlerType := (*pay.PayService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "pay",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func payHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(pay.PayReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(pay.PayService).Pay(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *PayArgs:
		success, err := handler.(pay.PayService).Pay(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PayResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newPayArgs() interface{} {
	return &PayArgs{}
}

func newPayResult() interface{} {
	return &PayResult{}
}

type PayArgs struct {
	Req *pay.PayReq
}

func (p *PayArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(pay.PayReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *PayArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *PayArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *PayArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *PayArgs) Unmarshal(in []byte) error {
	msg := new(pay.PayReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PayArgs_Req_DEFAULT *pay.PayReq

func (p *PayArgs) GetReq() *pay.PayReq {
	if !p.IsSetReq() {
		return PayArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PayArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PayArgs) GetFirstArgument() interface{} {
	return p.Req
}

type PayResult struct {
	Success *pay.PayRsp
}

var PayResult_Success_DEFAULT *pay.PayRsp

func (p *PayResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(pay.PayRsp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *PayResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *PayResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *PayResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *PayResult) Unmarshal(in []byte) error {
	msg := new(pay.PayRsp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PayResult) GetSuccess() *pay.PayRsp {
	if !p.IsSetSuccess() {
		return PayResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PayResult) SetSuccess(x interface{}) {
	p.Success = x.(*pay.PayRsp)
}

func (p *PayResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PayResult) GetResult() interface{} {
	return p.Success
}

func alipayWebhookHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(pay.AlipayWebhookReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(pay.PayService).AlipayWebhook(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *AlipayWebhookArgs:
		success, err := handler.(pay.PayService).AlipayWebhook(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AlipayWebhookResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newAlipayWebhookArgs() interface{} {
	return &AlipayWebhookArgs{}
}

func newAlipayWebhookResult() interface{} {
	return &AlipayWebhookResult{}
}

type AlipayWebhookArgs struct {
	Req *pay.AlipayWebhookReq
}

func (p *AlipayWebhookArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(pay.AlipayWebhookReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AlipayWebhookArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AlipayWebhookArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AlipayWebhookArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AlipayWebhookArgs) Unmarshal(in []byte) error {
	msg := new(pay.AlipayWebhookReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AlipayWebhookArgs_Req_DEFAULT *pay.AlipayWebhookReq

func (p *AlipayWebhookArgs) GetReq() *pay.AlipayWebhookReq {
	if !p.IsSetReq() {
		return AlipayWebhookArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AlipayWebhookArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AlipayWebhookArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AlipayWebhookResult struct {
	Success *pay.AlipayWebhookRsp
}

var AlipayWebhookResult_Success_DEFAULT *pay.AlipayWebhookRsp

func (p *AlipayWebhookResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(pay.AlipayWebhookRsp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AlipayWebhookResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AlipayWebhookResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AlipayWebhookResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AlipayWebhookResult) Unmarshal(in []byte) error {
	msg := new(pay.AlipayWebhookRsp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AlipayWebhookResult) GetSuccess() *pay.AlipayWebhookRsp {
	if !p.IsSetSuccess() {
		return AlipayWebhookResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AlipayWebhookResult) SetSuccess(x interface{}) {
	p.Success = x.(*pay.AlipayWebhookRsp)
}

func (p *AlipayWebhookResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AlipayWebhookResult) GetResult() interface{} {
	return p.Success
}

func closePayHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(pay.ClosePayReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(pay.PayService).ClosePay(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ClosePayArgs:
		success, err := handler.(pay.PayService).ClosePay(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ClosePayResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newClosePayArgs() interface{} {
	return &ClosePayArgs{}
}

func newClosePayResult() interface{} {
	return &ClosePayResult{}
}

type ClosePayArgs struct {
	Req *pay.ClosePayReq
}

func (p *ClosePayArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(pay.ClosePayReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ClosePayArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ClosePayArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ClosePayArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ClosePayArgs) Unmarshal(in []byte) error {
	msg := new(pay.ClosePayReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ClosePayArgs_Req_DEFAULT *pay.ClosePayReq

func (p *ClosePayArgs) GetReq() *pay.ClosePayReq {
	if !p.IsSetReq() {
		return ClosePayArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ClosePayArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ClosePayArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ClosePayResult struct {
	Success *pay.ClosePayRsp
}

var ClosePayResult_Success_DEFAULT *pay.ClosePayRsp

func (p *ClosePayResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(pay.ClosePayRsp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ClosePayResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ClosePayResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ClosePayResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ClosePayResult) Unmarshal(in []byte) error {
	msg := new(pay.ClosePayRsp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ClosePayResult) GetSuccess() *pay.ClosePayRsp {
	if !p.IsSetSuccess() {
		return ClosePayResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ClosePayResult) SetSuccess(x interface{}) {
	p.Success = x.(*pay.ClosePayRsp)
}

func (p *ClosePayResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClosePayResult) GetResult() interface{} {
	return p.Success
}

func refundPayHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(pay.RefundPayReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(pay.PayService).RefundPay(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RefundPayArgs:
		success, err := handler.(pay.PayService).RefundPay(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RefundPayResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRefundPayArgs() interface{} {
	return &RefundPayArgs{}
}

func newRefundPayResult() interface{} {
	return &RefundPayResult{}
}

type RefundPayArgs struct {
	Req *pay.RefundPayReq
}

func (p *RefundPayArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(pay.RefundPayReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RefundPayArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RefundPayArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RefundPayArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RefundPayArgs) Unmarshal(in []byte) error {
	msg := new(pay.RefundPayReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RefundPayArgs_Req_DEFAULT *pay.RefundPayReq

func (p *RefundPayArgs) GetReq() *pay.RefundPayReq {
	if !p.IsSetReq() {
		return RefundPayArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RefundPayArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RefundPayArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RefundPayResult struct {
	Success *pay.RefundPayRsp
}

var RefundPayResult_Success_DEFAULT *pay.RefundPayRsp

func (p *RefundPayResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(pay.RefundPayRsp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RefundPayResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RefundPayResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RefundPayResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RefundPayResult) Unmarshal(in []byte) error {
	msg := new(pay.RefundPayRsp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RefundPayResult) GetSuccess() *pay.RefundPayRsp {
	if !p.IsSetSuccess() {
		return RefundPayResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RefundPayResult) SetSuccess(x interface{}) {
	p.Success = x.(*pay.RefundPayRsp)
}

func (p *RefundPayResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RefundPayResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Pay(ctx context.Context, Req *pay.PayReq) (r *pay.PayRsp, err error) {
	var _args PayArgs
	_args.Req = Req
	var _result PayResult
	if err = p.c.Call(ctx, "Pay", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AlipayWebhook(ctx context.Context, Req *pay.AlipayWebhookReq) (r *pay.AlipayWebhookRsp, err error) {
	var _args AlipayWebhookArgs
	_args.Req = Req
	var _result AlipayWebhookResult
	if err = p.c.Call(ctx, "AlipayWebhook", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ClosePay(ctx context.Context, Req *pay.ClosePayReq) (r *pay.ClosePayRsp, err error) {
	var _args ClosePayArgs
	_args.Req = Req
	var _result ClosePayResult
	if err = p.c.Call(ctx, "ClosePay", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RefundPay(ctx context.Context, Req *pay.RefundPayReq) (r *pay.RefundPayRsp, err error) {
	var _args RefundPayArgs
	_args.Req = Req
	var _result RefundPayResult
	if err = p.c.Call(ctx, "RefundPay", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
